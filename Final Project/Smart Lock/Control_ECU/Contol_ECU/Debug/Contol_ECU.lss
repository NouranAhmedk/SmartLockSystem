
Contol_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002cc2  00002d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007a  0080007a  00002d70  2**0
                  ALLOC
  3 .stab         00003834  00000000  00000000  00002d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000444a  00000000  00000000  000065a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ab2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ac9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e96d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f13b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 0c 	call	0x1968	; 0x1968 <main>
      8a:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL);
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data) << UCSZ0);
     b72:	a0 e4       	ldi	r26, 0x40	; 64
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e0 e4       	ldi	r30, 0x40	; 64
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	28 2f       	mov	r18, r24
     b7e:	29 7f       	andi	r18, 0xF9	; 249
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 81       	ld	r24, Z
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	82 2b       	or	r24, r18
     b90:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << UPM0);
     b92:	a0 e4       	ldi	r26, 0x40	; 64
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e0 e4       	ldi	r30, 0x40	; 64
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	28 2f       	mov	r18, r24
     b9e:	2f 7c       	andi	r18, 0xCF	; 207
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	82 95       	swap	r24
     bac:	92 95       	swap	r25
     bae:	90 7f       	andi	r25, 0xF0	; 240
     bb0:	98 27       	eor	r25, r24
     bb2:	80 7f       	andi	r24, 0xF0	; 240
     bb4:	98 27       	eor	r25, r24
     bb6:	82 2b       	or	r24, r18
     bb8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit) << USBS);
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	28 2f       	mov	r18, r24
     bc6:	27 7f       	andi	r18, 0xF7	; 247
     bc8:	eb 81       	ldd	r30, Y+3	; 0x03
     bca:	fc 81       	ldd	r31, Y+4	; 0x04
     bcc:	82 81       	ldd	r24, Z+2	; 0x02
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	82 2b       	or	r24, r18
     be0:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     be2:	eb 81       	ldd	r30, Y+3	; 0x03
     be4:	fc 81       	ldd	r31, Y+4	; 0x04
     be6:	83 81       	ldd	r24, Z+3	; 0x03
     be8:	94 81       	ldd	r25, Z+4	; 0x04
     bea:	a5 81       	ldd	r26, Z+5	; 0x05
     bec:	b6 81       	ldd	r27, Z+6	; 0x06
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	aa 1f       	adc	r26, r26
     bf4:	bb 1f       	adc	r27, r27
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	aa 1f       	adc	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	aa 1f       	adc	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	9c 01       	movw	r18, r24
     c08:	ad 01       	movw	r20, r26
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	92 e1       	ldi	r25, 0x12	; 18
     c0e:	aa e7       	ldi	r26, 0x7A	; 122
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodsi4>
     c1a:	da 01       	movw	r26, r20
     c1c:	c9 01       	movw	r24, r18
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
     c24:	e0 e4       	ldi	r30, 0x40	; 64
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	89 2f       	mov	r24, r25
     c2e:	99 27       	eor	r25, r25
     c30:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c32:	e9 e2       	ldi	r30, 0x29	; 41
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	80 83       	st	Z, r24
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c54:	eb e2       	ldi	r30, 0x2B	; 43
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 72       	andi	r24, 0x20	; 32
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	b9 f3       	breq	.-18     	; 0xc54 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c66:	ec e2       	ldi	r30, 0x2C	; 44
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c6e:	0f 90       	pop	r0
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <UART_recieveByte>:
 * Description :
 * Functional responsible for receive byte from another UART device by polling.
 */

uint8 UART_recieveByte(void)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c7e:	eb e2       	ldi	r30, 0x2B	; 43
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	88 23       	and	r24, r24
     c86:	dc f7       	brge	.-10     	; 0xc7e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     c88:	ec e2       	ldi	r30, 0x2C	; 44
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <UART_sendString+0x6>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9b 83       	std	Y+3, r25	; 0x03
     ca2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca4:	19 82       	std	Y+1, r1	; 0x01
     ca6:	0e c0       	rjmp	.+28     	; 0xcc4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	fc 01       	movw	r30, r24
     cb4:	e2 0f       	add	r30, r18
     cb6:	f3 1f       	adc	r31, r19
     cb8:	80 81       	ld	r24, Z
     cba:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
		i++;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	9b 81       	ldd	r25, Y+3	; 0x03
     cce:	fc 01       	movw	r30, r24
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	80 81       	ld	r24, Z
     cd6:	88 23       	and	r24, r24
     cd8:	39 f7       	brne	.-50     	; 0xca8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <UART_receiveString+0xa>
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	9b 83       	std	Y+3, r25	; 0x03
     cf8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cfa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	8c 01       	movw	r16, r24
     d08:	02 0f       	add	r16, r18
     d0a:	13 1f       	adc	r17, r19
     d0c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
     d10:	f8 01       	movw	r30, r16
     d12:	80 83       	st	Z, r24
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	8c 01       	movw	r16, r24
     d28:	02 0f       	add	r16, r18
     d2a:	13 1f       	adc	r17, r19
     d2c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
     d30:	f8 01       	movw	r30, r16
     d32:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	80 81       	ld	r24, Z
     d46:	83 32       	cpi	r24, 0x23	; 35
     d48:	31 f7       	brne	.-52     	; 0xd16 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	fc 01       	movw	r30, r24
     d56:	e2 0f       	add	r30, r18
     d58:	f3 1f       	adc	r31, r19
     d5a:	10 82       	st	Z, r1
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_OVF_vect) {
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     d96:	80 91 7a 00 	lds	r24, 0x007A
     d9a:	90 91 7b 00 	lds	r25, 0x007B
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	29 f0       	breq	.+10     	; 0xdac <__vector_9+0x40>
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     da2:	e0 91 7a 00 	lds	r30, 0x007A
     da6:	f0 91 7b 00 	lds	r31, 0x007B
     daa:	09 95       	icall
	}
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_7>:
ISR(TIMER1_COMPA_vect) {
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     dfc:	80 91 7a 00 	lds	r24, 0x007A
     e00:	90 91 7b 00 	lds	r25, 0x007B
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	29 f0       	breq	.+10     	; 0xe12 <__vector_7+0x40>
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e08:	e0 91 7a 00 	lds	r30, 0x007A
     e0c:	f0 91 7b 00 	lds	r31, 0x007B
     e10:	09 95       	icall
	}
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <Timer1_init>:
 * Function to initialize the Timer driver
 * Setup the initial value of counter
 * Setup Normal mode or Compare mode
 * Setup Prescaler
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <Timer1_init+0x6>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * the FOC1A/FOC1B bits are only functional in non-PWM modes.
	 */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     e46:	ef e4       	ldi	r30, 0x4F	; 79
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8c e0       	ldi	r24, 0x0C	; 12
     e4c:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
     e4e:	ae e4       	ldi	r26, 0x4E	; 78
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ee e4       	ldi	r30, 0x4E	; 78
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	98 2f       	mov	r25, r24
     e5a:	98 7f       	andi	r25, 0xF8	; 248
     e5c:	e9 81       	ldd	r30, Y+1	; 0x01
     e5e:	fa 81       	ldd	r31, Y+2	; 0x02
     e60:	84 81       	ldd	r24, Z+4	; 0x04
     e62:	89 2b       	or	r24, r25
     e64:	8c 93       	st	X, r24

	/*
	 * start count from initial value
	 */
	TCNT1 = Config_Ptr->initial_value;
     e66:	ac e4       	ldi	r26, 0x4C	; 76
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	9c 93       	st	X, r25
     e76:	8e 93       	st	-X, r24

	/*Compare Mode*/
	if ((Config_Ptr->mode) == Compare_Mode) {
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	85 81       	ldd	r24, Z+5	; 0x05
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a9 f4       	brne	.+42     	; 0xeac <Timer1_init+0x74>

		OCR1A = Config_Ptr->compare_value; /* Set Compare Value */
     e82:	aa e4       	ldi	r26, 0x4A	; 74
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	9c 93       	st	X, r25
     e92:	8e 93       	st	-X, r24
		TIMSK = (1 << OCIE1A); /* Enable Timer1 Compare Interrupt */
     e94:	e9 e5       	ldi	r30, 0x59	; 89
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 e1       	ldi	r24, 0x10	; 16
     e9a:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12); /* Select WGM12 = 1 and WGM11 = 0 and WGM10 = 0  (Mode Number 4) */
     e9c:	ae e4       	ldi	r26, 0x4E	; 78
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ee e4       	ldi	r30, 0x4E	; 78
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 60       	ori	r24, 0x08	; 8
     ea8:	8c 93       	st	X, r24
     eaa:	09 c0       	rjmp	.+18     	; 0xebe <Timer1_init+0x86>

	}
	/*Normal Mode*/
	else if ((Config_Ptr->mode) == Normal_Mode) {
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	85 81       	ldd	r24, Z+5	; 0x05
     eb2:	88 23       	and	r24, r24
     eb4:	21 f4       	brne	.+8      	; 0xebe <Timer1_init+0x86>

		TIMSK = (1 << TOIE1); /* Enable Timer1 Overflow Interrupt */
     eb6:	e9 e5       	ldi	r30, 0x59	; 89
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	80 83       	st	Z, r24
	}
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <Timer1_deInit>:

/*
 * Description:
 * Functional to disable timer1
 */
void Timer1_deInit(void) {
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	/*Clear the time registers*/
	TCCR1A = 0;
     ed0:	ef e4       	ldi	r30, 0x4F	; 79
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	10 82       	st	Z, r1
	TCCR1B = 0;
     ed6:	ee e4       	ldi	r30, 0x4E	; 78
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	10 82       	st	Z, r1
	TCNT1 = 0;
     edc:	ec e4       	ldi	r30, 0x4C	; 76
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	11 82       	std	Z+1, r1	; 0x01
     ee2:	10 82       	st	Z, r1
	OCR1A = 0;
     ee4:	ea e4       	ldi	r30, 0x4A	; 74
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	11 82       	std	Z+1, r1	; 0x01
     eea:	10 82       	st	Z, r1

	/* Disable the  Overflow interrupt and Compare interrupt at OCIE1A*/
	TIMSK &= 0xEB; /*(0b11101011)*/
     eec:	a9 e5       	ldi	r26, 0x59	; 89
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e9 e5       	ldi	r30, 0x59	; 89
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8b 7e       	andi	r24, 0xEB	; 235
     ef8:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     efa:	10 92 7b 00 	sts	0x007B, r1
     efe:	10 92 7a 00 	sts	0x007A, r1
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void (*a_ptr)(void)) {
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <Timer1_setCallBack+0x6>
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	90 93 7b 00 	sts	0x007B, r25
     f1e:	80 93 7a 00 	sts	0x007A, r24
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <PWM_Timer0_Start>:
 * Timer0 will be used with pre-scaler F_CPU/8
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle) {
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	0f 92       	push	r0
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
     f38:	e2 e5       	ldi	r30, 0x52	; 82
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	10 82       	st	Z, r1

	OCR0 = (uint8) (((uint16) duty_cycle * 255) / (100)); /*Set Compare value*/
     f3e:	ec e5       	ldi	r30, 0x5C	; 92
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	48 2f       	mov	r20, r24
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	ca 01       	movw	r24, r20
     f4a:	9c 01       	movw	r18, r24
     f4c:	22 0f       	add	r18, r18
     f4e:	33 1f       	adc	r19, r19
     f50:	c9 01       	movw	r24, r18
     f52:	96 95       	lsr	r25
     f54:	98 2f       	mov	r25, r24
     f56:	88 27       	eor	r24, r24
     f58:	97 95       	ror	r25
     f5a:	87 95       	ror	r24
     f5c:	82 1b       	sub	r24, r18
     f5e:	93 0b       	sbc	r25, r19
     f60:	84 0f       	add	r24, r20
     f62:	95 1f       	adc	r25, r21
     f64:	24 e6       	ldi	r18, 0x64	; 100
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	b9 01       	movw	r22, r18
     f6a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodhi4>
     f6e:	cb 01       	movw	r24, r22
     f70:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PWM_TIMER0_PORT_ID, PWM_TIMER0_PIN_ID, LOGIC_HIGH);/*Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC*/
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	63 e0       	ldi	r22, 0x03	; 3
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     f7c:	e3 e5       	ldi	r30, 0x53	; 83
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8a e6       	ldi	r24, 0x6A	; 106
     f82:	80 83       	st	Z, r24
}
     f84:	0f 90       	pop	r0
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <TWI_init>:
#include "twi.h"
#include "../../LIBRARY/common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	00 d0       	rcall	.+0      	; 0xf92 <TWI_init+0x6>
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
     f9a:	a0 e2       	ldi	r26, 0x20	; 32
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	81 81       	ldd	r24, Z+1	; 0x01
     fa4:	8c 93       	st	X, r24
	TWSR = 0x00;
     fa6:	e1 e2       	ldi	r30, 0x21	; 33
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
     fac:	a2 e2       	ldi	r26, 0x22	; 34
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	80 81       	ld	r24, Z
     fb6:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
     fb8:	e6 e5       	ldi	r30, 0x56	; 86
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	84 e0       	ldi	r24, 0x04	; 4
     fbe:	80 83       	st	Z, r24
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <TWI_start>:

void TWI_start(void)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	84 ea       	ldi	r24, 0xA4	; 164
     fd8:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     fda:	e6 e5       	ldi	r30, 0x56	; 86
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 23       	and	r24, r24
     fe2:	dc f7       	brge	.-10     	; 0xfda <TWI_start+0x10>
}
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <TWI_stop>:

void TWI_stop(void)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	84 e9       	ldi	r24, 0x94	; 148
     ff8:	80 83       	st	Z, r24
}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    100c:	e3 e2       	ldi	r30, 0x23	; 35
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1014:	e6 e5       	ldi	r30, 0x56	; 86
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	84 e8       	ldi	r24, 0x84	; 132
    101a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    101c:	e6 e5       	ldi	r30, 0x56	; 86
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	88 23       	and	r24, r24
    1024:	dc f7       	brge	.-10     	; 0x101c <TWI_writeByte+0x1c>
}
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1036:	e6 e5       	ldi	r30, 0x56	; 86
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	84 ec       	ldi	r24, 0xC4	; 196
    103c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    103e:	e6 e5       	ldi	r30, 0x56	; 86
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	dc f7       	brge	.-10     	; 0x103e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1048:	e3 e2       	ldi	r30, 0x23	; 35
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    105c:	e6 e5       	ldi	r30, 0x56	; 86
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	84 e8       	ldi	r24, 0x84	; 132
    1062:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1064:	e6 e5       	ldi	r30, 0x56	; 86
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 23       	and	r24, r24
    106c:	dc f7       	brge	.-10     	; 0x1064 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    106e:	e3 e2       	ldi	r30, 0x23	; 35
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1084:	e1 e2       	ldi	r30, 0x21	; 33
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	88 7f       	andi	r24, 0xF8	; 248
    108c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <GPIO_setupPinDirection+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <GPIO_setupPinDirection+0x8>
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	6a 83       	std	Y+2, r22	; 0x02
    10aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 30       	cpi	r24, 0x08	; 8
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <GPIO_setupPinDirection+0x1c>
    10b2:	d5 c0       	rjmp	.+426    	; 0x125e <GPIO_setupPinDirection+0x1c6>
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	84 30       	cpi	r24, 0x04	; 4
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <GPIO_setupPinDirection+0x24>
    10ba:	d1 c0       	rjmp	.+418    	; 0x125e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3d 83       	std	Y+5, r19	; 0x05
    10c4:	2c 83       	std	Y+4, r18	; 0x04
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <GPIO_setupPinDirection+0x3a>
    10d0:	43 c0       	rjmp	.+134    	; 0x1158 <GPIO_setupPinDirection+0xc0>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <GPIO_setupPinDirection+0x4e>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	71 f0       	breq	.+28     	; 0x1100 <GPIO_setupPinDirection+0x68>
    10e4:	bc c0       	rjmp	.+376    	; 0x125e <GPIO_setupPinDirection+0x1c6>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <GPIO_setupPinDirection+0x5a>
    10f0:	5f c0       	rjmp	.+190    	; 0x11b0 <GPIO_setupPinDirection+0x118>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <GPIO_setupPinDirection+0x66>
    10fc:	85 c0       	rjmp	.+266    	; 0x1208 <GPIO_setupPinDirection+0x170>
    10fe:	af c0       	rjmp	.+350    	; 0x125e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	a1 f4       	brne	.+40     	; 0x112e <GPIO_setupPinDirection+0x96>

				SET_BIT(DDRA, pin_num); /* This line is equivalent to 	DDRA |= (1 << pin_num);  */
    1106:	aa e3       	ldi	r26, 0x3A	; 58
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_setupPinDirection+0x8c>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_setupPinDirection+0x88>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	98 c0       	rjmp	.+304    	; 0x125e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num); /* This line is equivalent to 	DDRA &= ~(1 << pin_num); */
    112e:	aa e3       	ldi	r26, 0x3A	; 58
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ea e3       	ldi	r30, 0x3A	; 58
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <GPIO_setupPinDirection+0xb4>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <GPIO_setupPinDirection+0xb0>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	83 c0       	rjmp	.+262    	; 0x125e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	a1 f4       	brne	.+40     	; 0x1186 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    115e:	a7 e3       	ldi	r26, 0x37	; 55
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_setupPinDirection+0xe4>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_setupPinDirection+0xe0>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	6c c0       	rjmp	.+216    	; 0x125e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_setupPinDirection+0x10c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_setupPinDirection+0x108>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	57 c0       	rjmp	.+174    	; 0x125e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	a1 f4       	brne	.+40     	; 0x11de <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    11b6:	a4 e3       	ldi	r26, 0x34	; 52
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e4 e3       	ldi	r30, 0x34	; 52
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_setupPinDirection+0x13c>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_setupPinDirection+0x138>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	40 c0       	rjmp	.+128    	; 0x125e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    11de:	a4 e3       	ldi	r26, 0x34	; 52
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e4 e3       	ldi	r30, 0x34	; 52
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <GPIO_setupPinDirection+0x164>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <GPIO_setupPinDirection+0x160>
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	2b c0       	rjmp	.+86     	; 0x125e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	a1 f4       	brne	.+40     	; 0x1236 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    120e:	a1 e3       	ldi	r26, 0x31	; 49
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e1 e3       	ldi	r30, 0x31	; 49
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GPIO_setupPinDirection+0x194>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <GPIO_setupPinDirection+0x190>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	14 c0       	rjmp	.+40     	; 0x125e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    1236:	a1 e3       	ldi	r26, 0x31	; 49
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e1 e3       	ldi	r30, 0x31	; 49
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <GPIO_setupPinDirection+0x1bc>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <GPIO_setupPinDirection+0x1b8>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <GPIO_writePin+0x6>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <GPIO_writePin+0x8>
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	6a 83       	std	Y+2, r22	; 0x02
    1280:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	08 f0       	brcs	.+2      	; 0x128a <GPIO_writePin+0x1c>
    1288:	d5 c0       	rjmp	.+426    	; 0x1434 <GPIO_writePin+0x1c6>
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <GPIO_writePin+0x24>
    1290:	d1 c0       	rjmp	.+418    	; 0x1434 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* Write the pin value as required */
		switch (port_num) {
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3d 83       	std	Y+5, r19	; 0x05
    129a:	2c 83       	std	Y+4, r18	; 0x04
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <GPIO_writePin+0x3a>
    12a6:	43 c0       	rjmp	.+134    	; 0x132e <GPIO_writePin+0xc0>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <GPIO_writePin+0x4e>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	71 f0       	breq	.+28     	; 0x12d6 <GPIO_writePin+0x68>
    12ba:	bc c0       	rjmp	.+376    	; 0x1434 <GPIO_writePin+0x1c6>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <GPIO_writePin+0x5a>
    12c6:	5f c0       	rjmp	.+190    	; 0x1386 <GPIO_writePin+0x118>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 05       	cpc	r25, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <GPIO_writePin+0x66>
    12d2:	85 c0       	rjmp	.+266    	; 0x13de <GPIO_writePin+0x170>
    12d4:	af c0       	rjmp	.+350    	; 0x1434 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	a1 f4       	brne	.+40     	; 0x1304 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <GPIO_writePin+0x8c>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <GPIO_writePin+0x88>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	98 c0       	rjmp	.+304    	; 0x1434 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_writePin+0xb4>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_writePin+0xb0>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	83 c0       	rjmp	.+262    	; 0x1434 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	a1 f4       	brne	.+40     	; 0x135c <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    1334:	a8 e3       	ldi	r26, 0x38	; 56
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_writePin+0xe4>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_writePin+0xe0>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	6c c0       	rjmp	.+216    	; 0x1434 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    135c:	a8 e3       	ldi	r26, 0x38	; 56
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_writePin+0x10c>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_writePin+0x108>
    137e:	80 95       	com	r24
    1380:	84 23       	and	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	57 c0       	rjmp	.+174    	; 0x1434 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	a1 f4       	brne	.+40     	; 0x13b4 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <GPIO_writePin+0x13c>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <GPIO_writePin+0x138>
    13ae:	84 2b       	or	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	40 c0       	rjmp	.+128    	; 0x1434 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    13b4:	a5 e3       	ldi	r26, 0x35	; 53
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e3       	ldi	r30, 0x35	; 53
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_writePin+0x164>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_writePin+0x160>
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	2b c0       	rjmp	.+86     	; 0x1434 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	a1 f4       	brne	.+40     	; 0x140c <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_writePin+0x194>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_writePin+0x190>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_writePin+0x1bc>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_writePin+0x1b8>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <GPIO_readPin+0x6>
    144a:	00 d0       	rcall	.+0      	; 0x144c <GPIO_readPin+0x8>
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	8a 83       	std	Y+2, r24	; 0x02
    1454:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1456:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 30       	cpi	r24, 0x08	; 8
    145c:	08 f0       	brcs	.+2      	; 0x1460 <GPIO_readPin+0x1c>
    145e:	84 c0       	rjmp	.+264    	; 0x1568 <GPIO_readPin+0x124>
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	84 30       	cpi	r24, 0x04	; 4
    1464:	08 f0       	brcs	.+2      	; 0x1468 <GPIO_readPin+0x24>
    1466:	80 c0       	rjmp	.+256    	; 0x1568 <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* Read the pin value as required */
		switch (port_num) {
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3d 83       	std	Y+5, r19	; 0x05
    1470:	2c 83       	std	Y+4, r18	; 0x04
    1472:	4c 81       	ldd	r20, Y+4	; 0x04
    1474:	5d 81       	ldd	r21, Y+5	; 0x05
    1476:	41 30       	cpi	r20, 0x01	; 1
    1478:	51 05       	cpc	r21, r1
    147a:	79 f1       	breq	.+94     	; 0x14da <GPIO_readPin+0x96>
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	91 05       	cpc	r25, r1
    1484:	34 f4       	brge	.+12     	; 0x1492 <GPIO_readPin+0x4e>
    1486:	2c 81       	ldd	r18, Y+4	; 0x04
    1488:	3d 81       	ldd	r19, Y+5	; 0x05
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	69 f0       	breq	.+26     	; 0x14aa <GPIO_readPin+0x66>
    1490:	6b c0       	rjmp	.+214    	; 0x1568 <GPIO_readPin+0x124>
    1492:	4c 81       	ldd	r20, Y+4	; 0x04
    1494:	5d 81       	ldd	r21, Y+5	; 0x05
    1496:	42 30       	cpi	r20, 0x02	; 2
    1498:	51 05       	cpc	r21, r1
    149a:	b9 f1       	breq	.+110    	; 0x150a <GPIO_readPin+0xc6>
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <GPIO_readPin+0x64>
    14a6:	49 c0       	rjmp	.+146    	; 0x153a <GPIO_readPin+0xf6>
    14a8:	5f c0       	rjmp	.+190    	; 0x1568 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    14aa:	e9 e3       	ldi	r30, 0x39	; 57
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a9 01       	movw	r20, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <GPIO_readPin+0x7e>
    14be:	55 95       	asr	r21
    14c0:	47 95       	ror	r20
    14c2:	8a 95       	dec	r24
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <GPIO_readPin+0x7a>
    14c6:	ca 01       	movw	r24, r20
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	90 70       	andi	r25, 0x00	; 0
    14cc:	88 23       	and	r24, r24
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	49 c0       	rjmp	.+146    	; 0x1568 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    14d6:	19 82       	std	Y+1, r1	; 0x01
    14d8:	47 c0       	rjmp	.+142    	; 0x1568 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    14da:	e6 e3       	ldi	r30, 0x36	; 54
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_readPin+0xae>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_readPin+0xaa>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	90 70       	andi	r25, 0x00	; 0
    14fc:	88 23       	and	r24, r24
    14fe:	19 f0       	breq	.+6      	; 0x1506 <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	31 c0       	rjmp	.+98     	; 0x1568 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	2f c0       	rjmp	.+94     	; 0x1568 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    150a:	e3 e3       	ldi	r30, 0x33	; 51
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a9 01       	movw	r20, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_readPin+0xde>
    151e:	55 95       	asr	r21
    1520:	47 95       	ror	r20
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_readPin+0xda>
    1526:	ca 01       	movw	r24, r20
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	90 70       	andi	r25, 0x00	; 0
    152c:	88 23       	and	r24, r24
    152e:	19 f0       	breq	.+6      	; 0x1536 <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	19 c0       	rjmp	.+50     	; 0x1568 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1536:	19 82       	std	Y+1, r1	; 0x01
    1538:	17 c0       	rjmp	.+46     	; 0x1568 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    153a:	e0 e3       	ldi	r30, 0x30	; 48
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a9 01       	movw	r20, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_readPin+0x10e>
    154e:	55 95       	asr	r21
    1550:	47 95       	ror	r20
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_readPin+0x10a>
    1556:	ca 01       	movw	r24, r20
    1558:	81 70       	andi	r24, 0x01	; 1
    155a:	90 70       	andi	r25, 0x00	; 0
    155c:	88 23       	and	r24, r24
    155e:	19 f0       	breq	.+6      	; 0x1566 <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1566:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <GPIO_setupPortDirection+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <GPIO_setupPortDirection+0x8>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	90 f5       	brcc	.+100    	; 0x15f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3c 83       	std	Y+4, r19	; 0x04
    1598:	2b 83       	std	Y+3, r18	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 05       	cpc	r25, r1
    15a2:	d1 f0       	breq	.+52     	; 0x15d8 <GPIO_setupPortDirection+0x5e>
    15a4:	2b 81       	ldd	r18, Y+3	; 0x03
    15a6:	3c 81       	ldd	r19, Y+4	; 0x04
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <GPIO_setupPortDirection+0x3e>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	61 f0       	breq	.+24     	; 0x15ce <GPIO_setupPortDirection+0x54>
    15b6:	1e c0       	rjmp	.+60     	; 0x15f4 <GPIO_setupPortDirection+0x7a>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	81 f0       	breq	.+32     	; 0x15e2 <GPIO_setupPortDirection+0x68>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	91 05       	cpc	r25, r1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <GPIO_setupPortDirection+0x72>
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    15ce:	ea e3       	ldi	r30, 0x3A	; 58
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24
    15d6:	0e c0       	rjmp	.+28     	; 0x15f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15d8:	e7 e3       	ldi	r30, 0x37	; 55
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	80 83       	st	Z, r24
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15e2:	e4 e3       	ldi	r30, 0x34	; 52
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	80 83       	st	Z, r24
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15ec:	e1 e3       	ldi	r30, 0x31	; 49
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <GPIO_writePort+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <GPIO_writePort+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	90 f5       	brcc	.+100    	; 0x167c <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (port_num) {
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	3c 83       	std	Y+4, r19	; 0x04
    1620:	2b 83       	std	Y+3, r18	; 0x03
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	d1 f0       	breq	.+52     	; 0x1660 <GPIO_writePort+0x5e>
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	2c f4       	brge	.+10     	; 0x1640 <GPIO_writePort+0x3e>
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	61 f0       	breq	.+24     	; 0x1656 <GPIO_writePort+0x54>
    163e:	1e c0       	rjmp	.+60     	; 0x167c <GPIO_writePort+0x7a>
    1640:	2b 81       	ldd	r18, Y+3	; 0x03
    1642:	3c 81       	ldd	r19, Y+4	; 0x04
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	81 f0       	breq	.+32     	; 0x166a <GPIO_writePort+0x68>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	91 05       	cpc	r25, r1
    1652:	81 f0       	breq	.+32     	; 0x1674 <GPIO_writePort+0x72>
    1654:	13 c0       	rjmp	.+38     	; 0x167c <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 83       	st	Z, r24
    165e:	0e c0       	rjmp	.+28     	; 0x167c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	80 83       	st	Z, r24
    1668:	09 c0       	rjmp	.+18     	; 0x167c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    166a:	e5 e3       	ldi	r30, 0x35	; 53
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	80 83       	st	Z, r24
    1672:	04 c0       	rjmp	.+8      	; 0x167c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1674:	e2 e3       	ldi	r30, 0x32	; 50
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	80 83       	st	Z, r24
			break;
		}
	}
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <GPIO_readPort+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <GPIO_readPort+0x8>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1698:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	90 f5       	brcc	.+100    	; 0x1704 <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* Read the port value as required */
		switch (port_num) {
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3c 83       	std	Y+4, r19	; 0x04
    16a8:	2b 83       	std	Y+3, r18	; 0x03
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	91 05       	cpc	r25, r1
    16b2:	d1 f0       	breq	.+52     	; 0x16e8 <GPIO_readPort+0x5e>
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	3c 81       	ldd	r19, Y+4	; 0x04
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <GPIO_readPort+0x3e>
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	61 f0       	breq	.+24     	; 0x16de <GPIO_readPort+0x54>
    16c6:	1e c0       	rjmp	.+60     	; 0x1704 <GPIO_readPort+0x7a>
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	81 f0       	breq	.+32     	; 0x16f2 <GPIO_readPort+0x68>
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	91 05       	cpc	r25, r1
    16da:	81 f0       	breq	.+32     	; 0x16fc <GPIO_readPort+0x72>
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    16de:	e9 e3       	ldi	r30, 0x39	; 57
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	0e c0       	rjmp	.+28     	; 0x1704 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16e8:	e6 e3       	ldi	r30, 0x36	; 54
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	09 c0       	rjmp	.+18     	; 0x1704 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16f2:	e3 e3       	ldi	r30, 0x33	; 51
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16fc:	e0 e3       	ldi	r30, 0x30	; 48
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../../MCAL/I2C/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <EEPROM_writeByte+0x6>
    171a:	00 d0       	rcall	.+0      	; 0x171c <EEPROM_writeByte+0x8>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1726:	0e 94 e5 07 	call	0xfca	; 0xfca <TWI_start>
    if (TWI_getStatus() != TWI_START)
    172a:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    172e:	88 30       	cpi	r24, 0x08	; 8
    1730:	11 f0       	breq	.+4      	; 0x1736 <EEPROM_writeByte+0x22>
        return ERROR;
    1732:	1c 82       	std	Y+4, r1	; 0x04
    1734:	28 c0       	rjmp	.+80     	; 0x1786 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	80 70       	andi	r24, 0x00	; 0
    173c:	97 70       	andi	r25, 0x07	; 7
    173e:	88 0f       	add	r24, r24
    1740:	89 2f       	mov	r24, r25
    1742:	88 1f       	adc	r24, r24
    1744:	99 0b       	sbc	r25, r25
    1746:	91 95       	neg	r25
    1748:	80 6a       	ori	r24, 0xA0	; 160
    174a:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    174e:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    1752:	88 31       	cpi	r24, 0x18	; 24
    1754:	11 f0       	breq	.+4      	; 0x175a <EEPROM_writeByte+0x46>
        return ERROR;
    1756:	1c 82       	std	Y+4, r1	; 0x04
    1758:	16 c0       	rjmp	.+44     	; 0x1786 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1760:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    1764:	88 32       	cpi	r24, 0x28	; 40
    1766:	11 f0       	breq	.+4      	; 0x176c <EEPROM_writeByte+0x58>
        return ERROR;
    1768:	1c 82       	std	Y+4, r1	; 0x04
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1772:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    1776:	88 32       	cpi	r24, 0x28	; 40
    1778:	11 f0       	breq	.+4      	; 0x177e <EEPROM_writeByte+0x6a>
        return ERROR;
    177a:	1c 82       	std	Y+4, r1	; 0x04
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    177e:	0e 94 f5 07 	call	0xfea	; 0xfea <TWI_stop>

    return SUCCESS;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	8c 83       	std	Y+4, r24	; 0x04
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <EEPROM_readByte+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <EEPROM_readByte+0x8>
    179e:	0f 92       	push	r0
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	7c 83       	std	Y+4, r23	; 0x04
    17aa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    17ac:	0e 94 e5 07 	call	0xfca	; 0xfca <TWI_start>
    if (TWI_getStatus() != TWI_START)
    17b0:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    17b4:	88 30       	cpi	r24, 0x08	; 8
    17b6:	11 f0       	breq	.+4      	; 0x17bc <EEPROM_readByte+0x26>
        return ERROR;
    17b8:	1d 82       	std	Y+5, r1	; 0x05
    17ba:	44 c0       	rjmp	.+136    	; 0x1844 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	80 70       	andi	r24, 0x00	; 0
    17c2:	97 70       	andi	r25, 0x07	; 7
    17c4:	88 0f       	add	r24, r24
    17c6:	89 2f       	mov	r24, r25
    17c8:	88 1f       	adc	r24, r24
    17ca:	99 0b       	sbc	r25, r25
    17cc:	91 95       	neg	r25
    17ce:	80 6a       	ori	r24, 0xA0	; 160
    17d0:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17d4:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    17d8:	88 31       	cpi	r24, 0x18	; 24
    17da:	11 f0       	breq	.+4      	; 0x17e0 <EEPROM_readByte+0x4a>
        return ERROR;
    17dc:	1d 82       	std	Y+5, r1	; 0x05
    17de:	32 c0       	rjmp	.+100    	; 0x1844 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17e6:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    17ea:	88 32       	cpi	r24, 0x28	; 40
    17ec:	11 f0       	breq	.+4      	; 0x17f2 <EEPROM_readByte+0x5c>
        return ERROR;
    17ee:	1d 82       	std	Y+5, r1	; 0x05
    17f0:	29 c0       	rjmp	.+82     	; 0x1844 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    17f2:	0e 94 e5 07 	call	0xfca	; 0xfca <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    17f6:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    17fa:	80 31       	cpi	r24, 0x10	; 16
    17fc:	11 f0       	breq	.+4      	; 0x1802 <EEPROM_readByte+0x6c>
        return ERROR;
    17fe:	1d 82       	std	Y+5, r1	; 0x05
    1800:	21 c0       	rjmp	.+66     	; 0x1844 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	80 70       	andi	r24, 0x00	; 0
    1808:	97 70       	andi	r25, 0x07	; 7
    180a:	88 0f       	add	r24, r24
    180c:	89 2f       	mov	r24, r25
    180e:	88 1f       	adc	r24, r24
    1810:	99 0b       	sbc	r25, r25
    1812:	91 95       	neg	r25
    1814:	81 6a       	ori	r24, 0xA1	; 161
    1816:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    181a:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    181e:	80 34       	cpi	r24, 0x40	; 64
    1820:	11 f0       	breq	.+4      	; 0x1826 <EEPROM_readByte+0x90>
        return ERROR;
    1822:	1d 82       	std	Y+5, r1	; 0x05
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1826:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_readByteWithNACK>
    182a:	eb 81       	ldd	r30, Y+3	; 0x03
    182c:	fc 81       	ldd	r31, Y+4	; 0x04
    182e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1830:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_getStatus>
    1834:	88 35       	cpi	r24, 0x58	; 88
    1836:	11 f0       	breq	.+4      	; 0x183c <EEPROM_readByte+0xa6>
        return ERROR;
    1838:	1d 82       	std	Y+5, r1	; 0x05
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    183c:	0e 94 f5 07 	call	0xfea	; 0xfea <TWI_stop>

    return SUCCESS;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	8d 83       	std	Y+5, r24	; 0x05
    1844:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <DcMotor_Init>:

/*
 * Description :
 * Function responsible for initialize the DC_Motor driver.
 */
void DcMotor_Init(void) {
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, PIN_OUTPUT);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, PIN_OUTPUT);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <DcMotor_Rotate>:

/*
 * Description :
 * Function responsible for initialize the DC_Motor_Rotate driver.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <DcMotor_Rotate+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DcMotor_Rotate+0x8>
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3c 83       	std	Y+4, r19	; 0x04
    18a4:	2b 83       	std	Y+3, r18	; 0x03
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	a1 f0       	breq	.+40     	; 0x18d8 <DcMotor_Rotate+0x4c>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	d1 f0       	breq	.+52     	; 0x18ee <DcMotor_Rotate+0x62>
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	01 f5       	brne	.+64     	; 0x1902 <DcMotor_Rotate+0x76>
	case STOP:
		GPIO_writePin(DC_MOTOR_FIRST_PORT_ID, DC_MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
    18d6:	15 c0       	rjmp	.+42     	; 0x1902 <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, LOGIC_HIGH);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
    18ec:	0a c0       	rjmp	.+20     	; 0x1902 <DcMotor_Rotate+0x76>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_HIGH);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
		break;
	}

	PWM_Timer0_Start(speed);
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	0e 94 96 07 	call	0xf2c	; 0xf2c <PWM_Timer0_Start>

}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <Buzzer_init>:

/*
 * Description :
 * Function responsible for initialize the Buzzer driver.
 */
void Buzzer_init() {
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setup the direction for the buzzer pin as output pin through the GPIO driver.
	 * Turn off the buzzer through the GPIO.
	 */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	65 e0       	ldi	r22, 0x05	; 5
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	65 e0       	ldi	r22, 0x05	; 5
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <Buzzer_on>:

/*
 * Description :
 * Function to enable the Buzzer
 */
void Buzzer_on(void) {
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Turn on the buzzer through the GPIO.
	 */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	65 e0       	ldi	r22, 0x05	; 5
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
}
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <Buzzer_off>:

/*
 * Description :
 * Function to disable the Buzzer
 */
void Buzzer_off(void) {
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Turn off the buzzer through the GPIO.
	 */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_writePin>
}
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <main>:
/*******************************************************************************
 *                                   Main                                      *
 *******************************************************************************/
volatile uint8 timer1_Ticks = 0;
volatile uint8 trial_flag = 3, exit_flag = 1;
int main(void) {
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	c1 58       	subi	r28, 0x81	; 129
    1976:	d0 40       	sbci	r29, 0x00	; 0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
	SREG_REG.bits.I_BIT = 1; /*Enable I-bit by bit register field*/
    1982:	ef e5       	ldi	r30, 0x5F	; 95
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	80 83       	st	Z, r24
	 * 8-bit data
	 * parity check is disabled
	 * stop bit is one bit
	 * baud rate is 9600
	 */
	UART_ConfigType UART_config = { EIGHT_bit, Disabled, ONE_bit, BR3 };
    198c:	ce 01       	movw	r24, r28
    198e:	88 59       	subi	r24, 0x98	; 152
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	ea 96       	adiw	r28, 0x3a	; 58
    1994:	9f af       	std	Y+63, r25	; 0x3f
    1996:	8e af       	std	Y+62, r24	; 0x3e
    1998:	ea 97       	sbiw	r28, 0x3a	; 58
    199a:	2d e6       	ldi	r18, 0x6D	; 109
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	ec 96       	adiw	r28, 0x3c	; 60
    19a0:	3f af       	std	Y+63, r19	; 0x3f
    19a2:	2e af       	std	Y+62, r18	; 0x3e
    19a4:	ec 97       	sbiw	r28, 0x3c	; 60
    19a6:	37 e0       	ldi	r19, 0x07	; 7
    19a8:	ed 96       	adiw	r28, 0x3d	; 61
    19aa:	3f af       	std	Y+63, r19	; 0x3f
    19ac:	ed 97       	sbiw	r28, 0x3d	; 61
    19ae:	ec 96       	adiw	r28, 0x3c	; 60
    19b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    19b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b4:	ec 97       	sbiw	r28, 0x3c	; 60
    19b6:	00 80       	ld	r0, Z
    19b8:	ec 96       	adiw	r28, 0x3c	; 60
    19ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    19bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    19be:	ec 97       	sbiw	r28, 0x3c	; 60
    19c0:	2f 5f       	subi	r18, 0xFF	; 255
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	ec 96       	adiw	r28, 0x3c	; 60
    19c6:	3f af       	std	Y+63, r19	; 0x3f
    19c8:	2e af       	std	Y+62, r18	; 0x3e
    19ca:	ec 97       	sbiw	r28, 0x3c	; 60
    19cc:	ea 96       	adiw	r28, 0x3a	; 58
    19ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    19d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    19d2:	ea 97       	sbiw	r28, 0x3a	; 58
    19d4:	00 82       	st	Z, r0
    19d6:	ea 96       	adiw	r28, 0x3a	; 58
    19d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    19da:	3f ad       	ldd	r19, Y+63	; 0x3f
    19dc:	ea 97       	sbiw	r28, 0x3a	; 58
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	ea 96       	adiw	r28, 0x3a	; 58
    19e4:	3f af       	std	Y+63, r19	; 0x3f
    19e6:	2e af       	std	Y+62, r18	; 0x3e
    19e8:	ea 97       	sbiw	r28, 0x3a	; 58
    19ea:	ed 96       	adiw	r28, 0x3d	; 61
    19ec:	3f ad       	ldd	r19, Y+63	; 0x3f
    19ee:	ed 97       	sbiw	r28, 0x3d	; 61
    19f0:	31 50       	subi	r19, 0x01	; 1
    19f2:	ed 96       	adiw	r28, 0x3d	; 61
    19f4:	3f af       	std	Y+63, r19	; 0x3f
    19f6:	ed 97       	sbiw	r28, 0x3d	; 61
    19f8:	ed 96       	adiw	r28, 0x3d	; 61
    19fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    19fc:	ed 97       	sbiw	r28, 0x3d	; 61
    19fe:	88 23       	and	r24, r24
    1a00:	b1 f6       	brne	.-84     	; 0x19ae <main+0x46>
	UART_init(&UART_config);
    1a02:	ce 01       	movw	r24, r28
    1a04:	88 59       	subi	r24, 0x98	; 152
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	 * Bit Rate: 400.000 Kbps using F_CPU=8MHz
	 * Prescaler/1
	 * Interrupt OFF
	 * Acknowledge bit OFF
	 */
	TWI_ConfigType TWI_Config = { SLAVE1, Fast_mode_400k, TWI_CLK_1 };
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	81 59       	subi	r24, 0x91	; 145
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	ef 96       	adiw	r28, 0x3f	; 63
    1a14:	9f af       	std	Y+63, r25	; 0x3f
    1a16:	8e af       	std	Y+62, r24	; 0x3e
    1a18:	ef 97       	sbiw	r28, 0x3f	; 63
    1a1a:	ea e6       	ldi	r30, 0x6A	; 106
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	c1 58       	subi	r28, 0x81	; 129
    1a20:	df 4f       	sbci	r29, 0xFF	; 255
    1a22:	f9 83       	std	Y+1, r31	; 0x01
    1a24:	e8 83       	st	Y, r30
    1a26:	cf 57       	subi	r28, 0x7F	; 127
    1a28:	d0 40       	sbci	r29, 0x00	; 0
    1a2a:	f3 e0       	ldi	r31, 0x03	; 3
    1a2c:	cf 57       	subi	r28, 0x7F	; 127
    1a2e:	df 4f       	sbci	r29, 0xFF	; 255
    1a30:	f8 83       	st	Y, r31
    1a32:	c1 58       	subi	r28, 0x81	; 129
    1a34:	d0 40       	sbci	r29, 0x00	; 0
    1a36:	c1 58       	subi	r28, 0x81	; 129
    1a38:	df 4f       	sbci	r29, 0xFF	; 255
    1a3a:	e8 81       	ld	r30, Y
    1a3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a3e:	cf 57       	subi	r28, 0x7F	; 127
    1a40:	d0 40       	sbci	r29, 0x00	; 0
    1a42:	00 80       	ld	r0, Z
    1a44:	c1 58       	subi	r28, 0x81	; 129
    1a46:	df 4f       	sbci	r29, 0xFF	; 255
    1a48:	28 81       	ld	r18, Y
    1a4a:	39 81       	ldd	r19, Y+1	; 0x01
    1a4c:	cf 57       	subi	r28, 0x7F	; 127
    1a4e:	d0 40       	sbci	r29, 0x00	; 0
    1a50:	2f 5f       	subi	r18, 0xFF	; 255
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	c1 58       	subi	r28, 0x81	; 129
    1a56:	df 4f       	sbci	r29, 0xFF	; 255
    1a58:	39 83       	std	Y+1, r19	; 0x01
    1a5a:	28 83       	st	Y, r18
    1a5c:	cf 57       	subi	r28, 0x7F	; 127
    1a5e:	d0 40       	sbci	r29, 0x00	; 0
    1a60:	ef 96       	adiw	r28, 0x3f	; 63
    1a62:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a64:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a66:	ef 97       	sbiw	r28, 0x3f	; 63
    1a68:	00 82       	st	Z, r0
    1a6a:	ef 96       	adiw	r28, 0x3f	; 63
    1a6c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a6e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a70:	ef 97       	sbiw	r28, 0x3f	; 63
    1a72:	2f 5f       	subi	r18, 0xFF	; 255
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
    1a76:	ef 96       	adiw	r28, 0x3f	; 63
    1a78:	3f af       	std	Y+63, r19	; 0x3f
    1a7a:	2e af       	std	Y+62, r18	; 0x3e
    1a7c:	ef 97       	sbiw	r28, 0x3f	; 63
    1a7e:	cf 57       	subi	r28, 0x7F	; 127
    1a80:	df 4f       	sbci	r29, 0xFF	; 255
    1a82:	38 81       	ld	r19, Y
    1a84:	c1 58       	subi	r28, 0x81	; 129
    1a86:	d0 40       	sbci	r29, 0x00	; 0
    1a88:	31 50       	subi	r19, 0x01	; 1
    1a8a:	cf 57       	subi	r28, 0x7F	; 127
    1a8c:	df 4f       	sbci	r29, 0xFF	; 255
    1a8e:	38 83       	st	Y, r19
    1a90:	c1 58       	subi	r28, 0x81	; 129
    1a92:	d0 40       	sbci	r29, 0x00	; 0
    1a94:	cf 57       	subi	r28, 0x7F	; 127
    1a96:	df 4f       	sbci	r29, 0xFF	; 255
    1a98:	88 81       	ld	r24, Y
    1a9a:	c1 58       	subi	r28, 0x81	; 129
    1a9c:	d0 40       	sbci	r29, 0x00	; 0
    1a9e:	88 23       	and	r24, r24
    1aa0:	51 f6       	brne	.-108    	; 0x1a36 <main+0xce>
	TWI_init(&TWI_Config);
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	81 59       	subi	r24, 0x91	; 145
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_init>
	/*******************************************************************************
	 *                           System Modules Initializations                    *
	 *******************************************************************************/
	DcMotor_Init();
    1aac:	0e 94 2b 0c 	call	0x1856	; 0x1856 <DcMotor_Init>
	Buzzer_init();
    1ab0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Buzzer_init>
	while (1) {

		/*Step 1 part 1: Receive both passwords via UART*/
		ReceiveTwoPasswords(receivedPassword1, receivedPassword2);
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	87 5a       	subi	r24, 0xA7	; 167
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	9e 01       	movw	r18, r28
    1abc:	22 5a       	subi	r18, 0xA2	; 162
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 b8 11 	call	0x2370	; 0x2370 <ReceiveTwoPasswords>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ef 5a       	subi	r30, 0xAF	; 175
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a6 e9       	ldi	r26, 0x96	; 150
    1ad2:	b3 e4       	ldi	r27, 0x43	; 67
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	8e 01       	movw	r16, r28
    1ade:	03 5b       	subi	r16, 0xB3	; 179
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ef 5a       	subi	r30, 0xAF	; 175
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a ef       	ldi	r20, 0xFA	; 250
    1af6:	54 e4       	ldi	r21, 0x44	; 68
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	a2 83       	std	Z+2, r26	; 0x02
    1b08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e3 5b       	subi	r30, 0xB3	; 179
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	44 f4       	brge	.+16     	; 0x1b38 <main+0x1d0>
		__ticks = 1;
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e5 5b       	subi	r30, 0xB5	; 181
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	64 c0       	rjmp	.+200    	; 0x1c00 <main+0x298>
	else if (__tmp > 65535)
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e3 5b       	subi	r30, 0xB3	; 179
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	0c f0       	brlt	.+2      	; 0x1b58 <main+0x1f0>
    1b56:	43 c0       	rjmp	.+134    	; 0x1bde <main+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ef 5a       	subi	r30, 0xAF	; 175
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	60 81       	ld	r22, Z
    1b60:	71 81       	ldd	r23, Z+1	; 0x01
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8e 01       	movw	r16, r28
    1b78:	05 5b       	subi	r16, 0xB5	; 181
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
    1b8e:	1f c0       	rjmp	.+62     	; 0x1bce <main+0x266>
    1b90:	fe 01       	movw	r30, r28
    1b92:	e7 5b       	subi	r30, 0xB7	; 183
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	88 ec       	ldi	r24, 0xC8	; 200
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e7 5b       	subi	r30, 0xB7	; 183
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <main+0x240>
    1bac:	fe 01       	movw	r30, r28
    1bae:	e7 5b       	subi	r30, 0xB7	; 183
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	de 01       	movw	r26, r28
    1bb8:	a5 5b       	subi	r26, 0xB5	; 181
    1bba:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 5b       	subi	r30, 0xB5	; 181
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	9c 93       	st	X, r25
    1bcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e5 5b       	subi	r30, 0xB5	; 181
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	d1 f6       	brne	.-76     	; 0x1b90 <main+0x228>
    1bdc:	27 c0       	rjmp	.+78     	; 0x1c2c <main+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	8e 01       	movw	r16, r28
    1be0:	05 5b       	subi	r16, 0xB5	; 181
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	fe 01       	movw	r30, r28
    1be6:	e3 5b       	subi	r30, 0xB3	; 179
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	de 01       	movw	r26, r28
    1c02:	a9 5b       	subi	r26, 0xB9	; 185
    1c04:	bf 4f       	sbci	r27, 0xFF	; 255
    1c06:	fe 01       	movw	r30, r28
    1c08:	e5 5b       	subi	r30, 0xB5	; 181
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	8d 93       	st	X+, r24
    1c12:	9c 93       	st	X, r25
    1c14:	fe 01       	movw	r30, r28
    1c16:	e9 5b       	subi	r30, 0xB9	; 185
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <main+0x2b6>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e9 5b       	subi	r30, 0xB9	; 185
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
		_delay_ms(MEDIUM_DELAY);

		/*Step 1 part 2: Compare the two passwords and take appropriate action*/
		comparePasswordsResult = ComparePasswords(receivedPassword1, receivedPassword2, matchedPassword);
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	87 5a       	subi	r24, 0xA7	; 167
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	9e 01       	movw	r18, r28
    1c34:	22 5a       	subi	r18, 0xA2	; 162
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	ae 01       	movw	r20, r28
    1c3a:	4d 59       	subi	r20, 0x9D	; 157
    1c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3e:	b9 01       	movw	r22, r18
    1c40:	0e 94 70 12 	call	0x24e0	; 0x24e0 <ComparePasswords>
    1c44:	fe 01       	movw	r30, r28
    1c46:	e8 5a       	subi	r30, 0xA8	; 168
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 83       	st	Z, r24
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ed 5b       	subi	r30, 0xBD	; 189
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	aa ef       	ldi	r26, 0xFA	; 250
    1c58:	b3 e4       	ldi	r27, 0x43	; 67
    1c5a:	80 83       	st	Z, r24
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	a2 83       	std	Z+2, r26	; 0x02
    1c60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	8e 01       	movw	r16, r28
    1c64:	01 5c       	subi	r16, 0xC1	; 193
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ed 5b       	subi	r30, 0xBD	; 189
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a ef       	ldi	r20, 0xFA	; 250
    1c7c:	54 e4       	ldi	r21, 0x44	; 68
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	80 83       	st	Z, r24
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	a2 83       	std	Z+2, r26	; 0x02
    1c8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c90:	fe 01       	movw	r30, r28
    1c92:	ff 96       	adiw	r30, 0x3f	; 63
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <main+0x34e>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9e af       	std	Y+62, r25	; 0x3e
    1cb2:	8d af       	std	Y+61, r24	; 0x3d
    1cb4:	46 c0       	rjmp	.+140    	; 0x1d42 <main+0x3da>
	else if (__tmp > 65535)
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ff 96       	adiw	r30, 0x3f	; 63
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	64 f5       	brge	.+88     	; 0x1d2a <main+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ed 5b       	subi	r30, 0xBD	; 189
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e af       	std	Y+62, r25	; 0x3e
    1cfe:	8d af       	std	Y+61, r24	; 0x3d
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <main+0x3b8>
    1d02:	88 ec       	ldi	r24, 0xC8	; 200
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c af       	std	Y+60, r25	; 0x3c
    1d08:	8b af       	std	Y+59, r24	; 0x3b
    1d0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <main+0x3a6>
    1d12:	9c af       	std	Y+60, r25	; 0x3c
    1d14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d18:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e af       	std	Y+62, r25	; 0x3e
    1d1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <main+0x39a>
    1d28:	16 c0       	rjmp	.+44     	; 0x1d56 <main+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	ff 96       	adiw	r30, 0x3f	; 63
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9e af       	std	Y+62, r25	; 0x3e
    1d40:	8d af       	std	Y+61, r24	; 0x3d
    1d42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d46:	9a af       	std	Y+58, r25	; 0x3a
    1d48:	89 af       	std	Y+57, r24	; 0x39
    1d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <main+0x3e6>
    1d52:	9a af       	std	Y+58, r25	; 0x3a
    1d54:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(KEY_PRESSED_DELAY);

		switch (comparePasswordsResult) {
    1d56:	fe 01       	movw	r30, r28
    1d58:	e8 5a       	subi	r30, 0xA8	; 168
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	e8 96       	adiw	r28, 0x38	; 56
    1d64:	3f af       	std	Y+63, r19	; 0x3f
    1d66:	2e af       	std	Y+62, r18	; 0x3e
    1d68:	e8 97       	sbiw	r28, 0x38	; 56
    1d6a:	e8 96       	adiw	r28, 0x38	; 56
    1d6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d70:	e8 97       	sbiw	r28, 0x38	; 56
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <main+0x412>
    1d78:	a2 c2       	rjmp	.+1348   	; 0x22be <main+0x956>
    1d7a:	e8 96       	adiw	r28, 0x38	; 56
    1d7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d80:	e8 97       	sbiw	r28, 0x38	; 56
    1d82:	e3 30       	cpi	r30, 0x03	; 3
    1d84:	f1 05       	cpc	r31, r1
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <main+0x422>
    1d88:	95 ce       	rjmp	.-726    	; 0x1ab4 <main+0x14c>
		case CORRECT_PASSWORD:
			/*Step 1 part 3: In case the two Passwords are matched save password in EEPROM*/
			/*Send password1 via UART*/
			EEPROM_write_Password(receivedPassword1);
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	87 5a       	subi	r24, 0xA7	; 167
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	0e 94 bd 12 	call	0x257a	; 0x257a <EEPROM_write_Password>

			/* Getting saved password from EEPROM*/
			EEPROM_read_Password(matchedPassword);
    1d94:	ce 01       	movw	r24, r28
    1d96:	8d 59       	subi	r24, 0x9D	; 157
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	0e 94 5f 13 	call	0x26be	; 0x26be <EEPROM_read_Password>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a6 e9       	ldi	r26, 0x96	; 150
    1da4:	b3 e4       	ldi	r27, 0x43	; 67
    1da6:	8d ab       	std	Y+53, r24	; 0x35
    1da8:	9e ab       	std	Y+54, r25	; 0x36
    1daa:	af ab       	std	Y+55, r26	; 0x37
    1dac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dae:	6d a9       	ldd	r22, Y+53	; 0x35
    1db0:	7e a9       	ldd	r23, Y+54	; 0x36
    1db2:	8f a9       	ldd	r24, Y+55	; 0x37
    1db4:	98 ad       	ldd	r25, Y+56	; 0x38
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4a ef       	ldi	r20, 0xFA	; 250
    1dbc:	54 e4       	ldi	r21, 0x44	; 68
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	89 ab       	std	Y+49, r24	; 0x31
    1dc8:	9a ab       	std	Y+50, r25	; 0x32
    1dca:	ab ab       	std	Y+51, r26	; 0x33
    1dcc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dce:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	2c f4       	brge	.+10     	; 0x1df0 <main+0x488>
		__ticks = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	98 ab       	std	Y+48, r25	; 0x30
    1dec:	8f a7       	std	Y+47, r24	; 0x2f
    1dee:	3f c0       	rjmp	.+126    	; 0x1e6e <main+0x506>
	else if (__tmp > 65535)
    1df0:	69 a9       	ldd	r22, Y+49	; 0x31
    1df2:	7a a9       	ldd	r23, Y+50	; 0x32
    1df4:	8b a9       	ldd	r24, Y+51	; 0x33
    1df6:	9c a9       	ldd	r25, Y+52	; 0x34
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	3f ef       	ldi	r19, 0xFF	; 255
    1dfc:	4f e7       	ldi	r20, 0x7F	; 127
    1dfe:	57 e4       	ldi	r21, 0x47	; 71
    1e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	4c f5       	brge	.+82     	; 0x1e5a <main+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	98 ab       	std	Y+48, r25	; 0x30
    1e2e:	8f a7       	std	Y+47, r24	; 0x2f
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <main+0x4e8>
    1e32:	88 ec       	ldi	r24, 0xC8	; 200
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9e a7       	std	Y+46, r25	; 0x2e
    1e38:	8d a7       	std	Y+45, r24	; 0x2d
    1e3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <main+0x4d6>
    1e42:	9e a7       	std	Y+46, r25	; 0x2e
    1e44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e48:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e52:	98 a9       	ldd	r25, Y+48	; 0x30
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	69 f7       	brne	.-38     	; 0x1e32 <main+0x4ca>
    1e58:	14 c0       	rjmp	.+40     	; 0x1e82 <main+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e60:	9c a9       	ldd	r25, Y+52	; 0x34
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	98 ab       	std	Y+48, r25	; 0x30
    1e6c:	8f a7       	std	Y+47, r24	; 0x2f
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	9c a7       	std	Y+44, r25	; 0x2c
    1e74:	8b a7       	std	Y+43, r24	; 0x2b
    1e76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <main+0x512>
    1e7e:	9c a7       	std	Y+44, r25	; 0x2c
    1e80:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(MEDIUM_DELAY);

			/* Send flag to M1 that is passwords are matched*/
			while (UART_recieveByte() != UART_CHECKING_PASS);
    1e82:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    1e86:	85 30       	cpi	r24, 0x05	; 5
    1e88:	e1 f7       	brne	.-8      	; 0x1e82 <main+0x51a>
			UART_sendByte(CORRECT_PASSWORD);
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	aa ef       	ldi	r26, 0xFA	; 250
    1e96:	b3 e4       	ldi	r27, 0x43	; 67
    1e98:	8f a3       	std	Y+39, r24	; 0x27
    1e9a:	98 a7       	std	Y+40, r25	; 0x28
    1e9c:	a9 a7       	std	Y+41, r26	; 0x29
    1e9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a ef       	ldi	r20, 0xFA	; 250
    1eae:	54 e4       	ldi	r21, 0x44	; 68
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8b a3       	std	Y+35, r24	; 0x23
    1eba:	9c a3       	std	Y+36, r25	; 0x24
    1ebc:	ad a3       	std	Y+37, r26	; 0x25
    1ebe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <main+0x57a>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9a a3       	std	Y+34, r25	; 0x22
    1ede:	89 a3       	std	Y+33, r24	; 0x21
    1ee0:	3f c0       	rjmp	.+126    	; 0x1f60 <main+0x5f8>
	else if (__tmp > 65535)
    1ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	4c f5       	brge	.+82     	; 0x1f4c <main+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	6f a1       	ldd	r22, Y+39	; 0x27
    1efc:	78 a5       	ldd	r23, Y+40	; 0x28
    1efe:	89 a5       	ldd	r24, Y+41	; 0x29
    1f00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e2       	ldi	r20, 0x20	; 32
    1f08:	51 e4       	ldi	r21, 0x41	; 65
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9a a3       	std	Y+34, r25	; 0x22
    1f20:	89 a3       	std	Y+33, r24	; 0x21
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <main+0x5da>
    1f24:	88 ec       	ldi	r24, 0xC8	; 200
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	98 a3       	std	Y+32, r25	; 0x20
    1f2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <main+0x5c8>
    1f34:	98 a3       	std	Y+32, r25	; 0x20
    1f36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f38:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	9a a3       	std	Y+34, r25	; 0x22
    1f40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	89 a1       	ldd	r24, Y+33	; 0x21
    1f44:	9a a1       	ldd	r25, Y+34	; 0x22
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	69 f7       	brne	.-38     	; 0x1f24 <main+0x5bc>
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <main+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f50:	8d a1       	ldd	r24, Y+37	; 0x25
    1f52:	9e a1       	ldd	r25, Y+38	; 0x26
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9a a3       	std	Y+34, r25	; 0x22
    1f5e:	89 a3       	std	Y+33, r24	; 0x21
    1f60:	89 a1       	ldd	r24, Y+33	; 0x21
    1f62:	9a a1       	ldd	r25, Y+34	; 0x22
    1f64:	9e 8f       	std	Y+30, r25	; 0x1e
    1f66:	8d 8f       	std	Y+29, r24	; 0x1d
    1f68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <main+0x604>
    1f70:	9e 8f       	std	Y+30, r25	; 0x1e
    1f72:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(KEY_PRESSED_DELAY);
			exit_flag = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	80 93 69 00 	sts	0x0069, r24
    1f7a:	96 c1       	rjmp	.+812    	; 0x22a8 <main+0x940>

			/* Step 2 is ignored because its done in M1 [HMI]*/
			while( trial_flag > 0 && exit_flag) {

				/* Step 3 part 2: Receive door state ( + only or - only )*/
				UART_sendByte(CHOOSEN_OPTION);
    1f7c:	87 e0       	ldi	r24, 0x07	; 7
    1f7e:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
				choosenOption = UART_recieveByte();
    1f82:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    1f86:	fe 01       	movw	r30, r28
    1f88:	e9 5a       	subi	r30, 0xA9	; 169
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 83       	st	Z, r24
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e2       	ldi	r26, 0x20	; 32
    1f94:	b1 e4       	ldi	r27, 0x41	; 65
    1f96:	89 8f       	std	Y+25, r24	; 0x19
    1f98:	9a 8f       	std	Y+26, r25	; 0x1a
    1f9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8d 8b       	std	Y+21, r24	; 0x15
    1fb8:	9e 8b       	std	Y+22, r25	; 0x16
    1fba:	af 8b       	std	Y+23, r26	; 0x17
    1fbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <main+0x678>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 8b       	std	Y+20, r25	; 0x14
    1fdc:	8b 8b       	std	Y+19, r24	; 0x13
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <main+0x6f6>
	else if (__tmp > 65535)
    1fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <main+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <main+0x6d8>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9a 8b       	std	Y+18, r25	; 0x12
    2028:	89 8b       	std	Y+17, r24	; 0x11
    202a:	89 89       	ldd	r24, Y+17	; 0x11
    202c:	9a 89       	ldd	r25, Y+18	; 0x12
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <main+0x6c6>
    2032:	9a 8b       	std	Y+18, r25	; 0x12
    2034:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <main+0x6ba>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <main+0x70a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6d 89       	ldd	r22, Y+21	; 0x15
    204c:	7e 89       	ldd	r23, Y+22	; 0x16
    204e:	8f 89       	ldd	r24, Y+23	; 0x17
    2050:	98 8d       	ldd	r25, Y+24	; 0x18
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	98 8b       	std	Y+16, r25	; 0x10
    2064:	8f 87       	std	Y+15, r24	; 0x0f
    2066:	8f 85       	ldd	r24, Y+15	; 0x0f
    2068:	98 89       	ldd	r25, Y+16	; 0x10
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <main+0x702>
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(SMALL_DELAY);

				/* Step 3 part 3: Receive door password in case ( + or - )*/
				ReceiveDoorPassword(receivedPassword1);
    2072:	ce 01       	movw	r24, r28
    2074:	87 5a       	subi	r24, 0xA7	; 167
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	0e 94 03 14 	call	0x2806	; 0x2806 <ReceiveDoorPassword>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	aa ef       	ldi	r26, 0xFA	; 250
    2082:	b3 e4       	ldi	r27, 0x43	; 67
    2084:	8b 87       	std	Y+11, r24	; 0x0b
    2086:	9c 87       	std	Y+12, r25	; 0x0c
    2088:	ad 87       	std	Y+13, r26	; 0x0d
    208a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6b 85       	ldd	r22, Y+11	; 0x0b
    208e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2090:	8d 85       	ldd	r24, Y+13	; 0x0d
    2092:	9e 85       	ldd	r25, Y+14	; 0x0e
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8f 83       	std	Y+7, r24	; 0x07
    20a6:	98 87       	std	Y+8, r25	; 0x08
    20a8:	a9 87       	std	Y+9, r26	; 0x09
    20aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <main+0x766>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <main+0x7e4>
	else if (__tmp > 65535)
    20ce:	6f 81       	ldd	r22, Y+7	; 0x07
    20d0:	78 85       	ldd	r23, Y+8	; 0x08
    20d2:	89 85       	ldd	r24, Y+9	; 0x09
    20d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <main+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	0f c0       	rjmp	.+30     	; 0x212e <main+0x7c6>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9c 83       	std	Y+4, r25	; 0x04
    2116:	8b 83       	std	Y+3, r24	; 0x03
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	9c 81       	ldd	r25, Y+4	; 0x04
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <main+0x7b4>
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <main+0x7a8>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <main+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	6f 81       	ldd	r22, Y+7	; 0x07
    213a:	78 85       	ldd	r23, Y+8	; 0x08
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <main+0x7f0>
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(KEY_PRESSED_DELAY);


				/* Step 3 part 4: Compare the passwords and saved password which is matched array*/
				doorPasswordsResultPlus = CompareSavedPassword(receivedPassword1 , matchedPassword);
    2160:	ce 01       	movw	r24, r28
    2162:	87 5a       	subi	r24, 0xA7	; 167
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	9e 01       	movw	r18, r28
    2168:	2d 59       	subi	r18, 0x9D	; 157
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	b9 01       	movw	r22, r18
    216e:	0e 94 a5 14 	call	0x294a	; 0x294a <CompareSavedPassword>
    2172:	fe 01       	movw	r30, r28
    2174:	ea 5a       	subi	r30, 0xAA	; 170
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 83       	st	Z, r24
				doorPasswordsResultMinus = CompareSavedPassword(receivedPassword1 , matchedPassword);
    217a:	ce 01       	movw	r24, r28
    217c:	87 5a       	subi	r24, 0xA7	; 167
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	9e 01       	movw	r18, r28
    2182:	2d 59       	subi	r18, 0x9D	; 157
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	b9 01       	movw	r22, r18
    2188:	0e 94 a5 14 	call	0x294a	; 0x294a <CompareSavedPassword>
    218c:	fe 01       	movw	r30, r28
    218e:	eb 5a       	subi	r30, 0xAB	; 171
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 83       	st	Z, r24

				if(choosenOption == DOOR_PASSWORD_STATE){
    2194:	fe 01       	movw	r30, r28
    2196:	e9 5a       	subi	r30, 0xA9	; 169
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	88 30       	cpi	r24, 0x08	; 8
    219e:	09 f0       	breq	.+2      	; 0x21a2 <main+0x83a>
    21a0:	43 c0       	rjmp	.+134    	; 0x2228 <main+0x8c0>
					switch (doorPasswordsResultPlus) {
    21a2:	fe 01       	movw	r30, r28
    21a4:	ea 5a       	subi	r30, 0xAA	; 170
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	e6 96       	adiw	r28, 0x36	; 54
    21b0:	3f af       	std	Y+63, r19	; 0x3f
    21b2:	2e af       	std	Y+62, r18	; 0x3e
    21b4:	e6 97       	sbiw	r28, 0x36	; 54
    21b6:	e6 96       	adiw	r28, 0x36	; 54
    21b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    21bc:	e6 97       	sbiw	r28, 0x36	; 54
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	91 05       	cpc	r25, r1
    21c2:	c1 f0       	breq	.+48     	; 0x21f4 <main+0x88c>
    21c4:	e6 96       	adiw	r28, 0x36	; 54
    21c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    21c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ca:	e6 97       	sbiw	r28, 0x36	; 54
    21cc:	e3 30       	cpi	r30, 0x03	; 3
    21ce:	f1 05       	cpc	r31, r1
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <main+0x86c>
    21d2:	6a c0       	rjmp	.+212    	; 0x22a8 <main+0x940>
					case CORRECT_PASSWORD:
						/* Send flag to M1 that is password and saved password are matched*/
						while (UART_recieveByte() != DOOR_STATE);
    21d4:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    21d8:	84 30       	cpi	r24, 0x04	; 4
    21da:	e1 f7       	brne	.-8      	; 0x21d4 <main+0x86c>
						UART_sendByte(CORRECT_PASSWORD);
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
						mainOpertaionsOptions();
    21e2:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <mainOpertaionsOptions>
						trial_flag = 3;
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	80 93 68 00 	sts	0x0068, r24
						exit_flag = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 69 00 	sts	0x0069, r24
    21f2:	5a c0       	rjmp	.+180    	; 0x22a8 <main+0x940>

						break;
					case INCORRECT_PASSWORD:
						/* Send flag to M1 that is password and saved password are matched*/
						while (UART_recieveByte() != DOOR_STATE);
    21f4:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <main+0x88c>
						UART_sendByte(INCORRECT_PASSWORD);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
						 /* Certain times of trials that has been applied form HCI to CONTROL_ECU in order to make both at same flow
						  * if the trails end [reach to zero] the buzzer will be on for 60 seconds*/
						trial_flag--;
    2202:	80 91 68 00 	lds	r24, 0x0068
    2206:	81 50       	subi	r24, 0x01	; 1
    2208:	80 93 68 00 	sts	0x0068, r24
						if(trial_flag == 0){
    220c:	80 91 68 00 	lds	r24, 0x0068
    2210:	88 23       	and	r24, r24
    2212:	09 f0       	breq	.+2      	; 0x2216 <main+0x8ae>
    2214:	49 c0       	rjmp	.+146    	; 0x22a8 <main+0x940>
							IncorrectOptions();
    2216:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <IncorrectOptions>
							trial_flag = 3;
    221a:	83 e0       	ldi	r24, 0x03	; 3
    221c:	80 93 68 00 	sts	0x0068, r24
							exit_flag = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	80 93 69 00 	sts	0x0069, r24
    2226:	40 c0       	rjmp	.+128    	; 0x22a8 <main+0x940>
						}
						break;
					}
				}else if (choosenOption == CHANGE_PASSWORD_STATE){
    2228:	fe 01       	movw	r30, r28
    222a:	e9 5a       	subi	r30, 0xA9	; 169
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	89 30       	cpi	r24, 0x09	; 9
    2232:	d1 f5       	brne	.+116    	; 0x22a8 <main+0x940>
					switch (doorPasswordsResultMinus) {
    2234:	fe 01       	movw	r30, r28
    2236:	eb 5a       	subi	r30, 0xAB	; 171
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	e4 96       	adiw	r28, 0x34	; 52
    2242:	3f af       	std	Y+63, r19	; 0x3f
    2244:	2e af       	std	Y+62, r18	; 0x3e
    2246:	e4 97       	sbiw	r28, 0x34	; 52
    2248:	e4 96       	adiw	r28, 0x34	; 52
    224a:	8e ad       	ldd	r24, Y+62	; 0x3e
    224c:	9f ad       	ldd	r25, Y+63	; 0x3f
    224e:	e4 97       	sbiw	r28, 0x34	; 52
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	91 05       	cpc	r25, r1
    2254:	89 f0       	breq	.+34     	; 0x2278 <main+0x910>
    2256:	e4 96       	adiw	r28, 0x34	; 52
    2258:	ee ad       	ldd	r30, Y+62	; 0x3e
    225a:	ff ad       	ldd	r31, Y+63	; 0x3f
    225c:	e4 97       	sbiw	r28, 0x34	; 52
    225e:	e3 30       	cpi	r30, 0x03	; 3
    2260:	f1 05       	cpc	r31, r1
    2262:	11 f5       	brne	.+68     	; 0x22a8 <main+0x940>
					case CORRECT_PASSWORD:
						/* Send flag to M1 that is password and saved password are matched*/
						while (UART_recieveByte() != DOOR_STATE);
    2264:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2268:	84 30       	cpi	r24, 0x04	; 4
    226a:	e1 f7       	brne	.-8      	; 0x2264 <main+0x8fc>
						UART_sendByte(CORRECT_PASSWORD);
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
						exit_flag = 0;
    2272:	10 92 69 00 	sts	0x0069, r1
    2276:	18 c0       	rjmp	.+48     	; 0x22a8 <main+0x940>

						break;
					case INCORRECT_PASSWORD:
						/* Send flag to M1 that is password and saved password are matched*/
						while (UART_recieveByte() != DOOR_STATE);
    2278:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	e1 f7       	brne	.-8      	; 0x2278 <main+0x910>
						UART_sendByte(INCORRECT_PASSWORD);
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
						 /* Certain times of trials that has been applied form HCI to CONTROL_ECU in order to make both at same flow
						  * if the trails end [reach to zero] the buzzer will be on for 60 seconds*/
						trial_flag--;
    2286:	80 91 68 00 	lds	r24, 0x0068
    228a:	81 50       	subi	r24, 0x01	; 1
    228c:	80 93 68 00 	sts	0x0068, r24
						if(trial_flag == 0){
    2290:	80 91 68 00 	lds	r24, 0x0068
    2294:	88 23       	and	r24, r24
    2296:	41 f4       	brne	.+16     	; 0x22a8 <main+0x940>
							IncorrectOptions();
    2298:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <IncorrectOptions>
							trial_flag = 3;
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	80 93 68 00 	sts	0x0068, r24
							exit_flag = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	80 93 69 00 	sts	0x0069, r24
			UART_sendByte(CORRECT_PASSWORD);
			_delay_ms(KEY_PRESSED_DELAY);
			exit_flag = 1;

			/* Step 2 is ignored because its done in M1 [HMI]*/
			while( trial_flag > 0 && exit_flag) {
    22a8:	80 91 68 00 	lds	r24, 0x0068
    22ac:	88 23       	and	r24, r24
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <main+0x94a>
    22b0:	01 cc       	rjmp	.-2046   	; 0x1ab4 <main+0x14c>
    22b2:	80 91 69 00 	lds	r24, 0x0069
    22b6:	88 23       	and	r24, r24
    22b8:	09 f0       	breq	.+2      	; 0x22bc <main+0x954>
    22ba:	60 ce       	rjmp	.-832    	; 0x1f7c <main+0x614>
    22bc:	fb cb       	rjmp	.-2058   	; 0x1ab4 <main+0x14c>
			}
			break;
		 case INCORRECT_PASSWORD:
			/*Step 1 part 3: In case the two Passwords are not matched go to step 1 in HMI*/
			/* Send flag to M1 that is passwords are matched*/
			while (UART_recieveByte() != UART_CHECKING_PASS);
    22be:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    22c2:	85 30       	cpi	r24, 0x05	; 5
    22c4:	e1 f7       	brne	.-8      	; 0x22be <main+0x956>
			UART_sendByte(INCORRECT_PASSWORD);
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
    22cc:	f3 cb       	rjmp	.-2074   	; 0x1ab4 <main+0x14c>

000022ce <timer1_tick>:
}

/*******************************************************************************
 *                    FUNCTION DEFINITION FOR TIMER                            *
 *******************************************************************************/
void timer1_tick(void) {
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	timer1_Ticks++;
    22d6:	80 91 7c 00 	lds	r24, 0x007C
    22da:	8f 5f       	subi	r24, 0xFF	; 255
    22dc:	80 93 7c 00 	sts	0x007C, r24
}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <timer1_delay>:

void timer1_delay(uint8 seconds) {
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	2c 97       	sbiw	r28, 0x0c	; 12
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	8f 83       	std	Y+7, r24	; 0x07
	timer1_Ticks = 0; // Reset the timer
    22fc:	10 92 7c 00 	sts	0x007C, r1
	 * Operation mode: 	Compare mode
	 * OCR1A = 31250	Compare value
	 * Generates an interrupt every 1 second
	 */

	Timer1_ConfigType TIMER1_Config = { 0, 31250, CLK_256, Compare_Mode };
    2300:	ce 01       	movw	r24, r28
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	99 87       	std	Y+9, r25	; 0x09
    2306:	88 87       	std	Y+8, r24	; 0x08
    2308:	e4 e7       	ldi	r30, 0x74	; 116
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	fb 87       	std	Y+11, r31	; 0x0b
    230e:	ea 87       	std	Y+10, r30	; 0x0a
    2310:	f6 e0       	ldi	r31, 0x06	; 6
    2312:	fc 87       	std	Y+12, r31	; 0x0c
    2314:	ea 85       	ldd	r30, Y+10	; 0x0a
    2316:	fb 85       	ldd	r31, Y+11	; 0x0b
    2318:	00 80       	ld	r0, Z
    231a:	8a 85       	ldd	r24, Y+10	; 0x0a
    231c:	9b 85       	ldd	r25, Y+11	; 0x0b
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	9b 87       	std	Y+11, r25	; 0x0b
    2322:	8a 87       	std	Y+10, r24	; 0x0a
    2324:	e8 85       	ldd	r30, Y+8	; 0x08
    2326:	f9 85       	ldd	r31, Y+9	; 0x09
    2328:	00 82       	st	Z, r0
    232a:	88 85       	ldd	r24, Y+8	; 0x08
    232c:	99 85       	ldd	r25, Y+9	; 0x09
    232e:	01 96       	adiw	r24, 0x01	; 1
    2330:	99 87       	std	Y+9, r25	; 0x09
    2332:	88 87       	std	Y+8, r24	; 0x08
    2334:	9c 85       	ldd	r25, Y+12	; 0x0c
    2336:	91 50       	subi	r25, 0x01	; 1
    2338:	9c 87       	std	Y+12, r25	; 0x0c
    233a:	ec 85       	ldd	r30, Y+12	; 0x0c
    233c:	ee 23       	and	r30, r30
    233e:	51 f7       	brne	.-44     	; 0x2314 <timer1_delay+0x2e>
	/* Reinitialize the timer */
	Timer1_init(&TIMER1_Config);
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	0e 94 1c 07 	call	0xe38	; 0xe38 <Timer1_init>
	Timer1_setCallBack(timer1_tick);
    2348:	87 e6       	ldi	r24, 0x67	; 103
    234a:	91 e1       	ldi	r25, 0x11	; 17
    234c:	0e 94 84 07 	call	0xf08	; 0xf08 <Timer1_setCallBack>
	while (timer1_Ticks != seconds);
    2350:	90 91 7c 00 	lds	r25, 0x007C
    2354:	8f 81       	ldd	r24, Y+7	; 0x07
    2356:	98 17       	cp	r25, r24
    2358:	d9 f7       	brne	.-10     	; 0x2350 <timer1_delay+0x6a>
	Timer1_deInit();
    235a:	0e 94 64 07 	call	0xec8	; 0xec8 <Timer1_deInit>
}
    235e:	2c 96       	adiw	r28, 0x0c	; 12
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <ReceiveTwoPasswords>:
 *******************************************************************************/

/*
 * ReceiveTwoPasswords function receives two passwords from M1 via UART.
 */
void ReceiveTwoPasswords(uint8 *password1, uint8 *password2) {
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	63 97       	sbiw	r28, 0x13	; 19
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	99 8b       	std	Y+17, r25	; 0x11
    238a:	88 8b       	std	Y+16, r24	; 0x10
    238c:	7b 8b       	std	Y+19, r23	; 0x13
    238e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;

	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(UART_START);
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>

	/* Receive password1 via UART */
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2396:	1f 86       	std	Y+15, r1	; 0x0f
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <ReceiveTwoPasswords+0x48>
		password1[i] = UART_recieveByte();
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	88 89       	ldd	r24, Y+16	; 0x10
    23a2:	99 89       	ldd	r25, Y+17	; 0x11
    23a4:	8c 01       	movw	r16, r24
    23a6:	02 0f       	add	r16, r18
    23a8:	13 1f       	adc	r17, r19
    23aa:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    23ae:	f8 01       	movw	r30, r16
    23b0:	80 83       	st	Z, r24

	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(UART_START);

	/* Receive password1 via UART */
	for (i = 0; i < PASSWORD_SIZE; i++) {
    23b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b4:	8f 5f       	subi	r24, 0xFF	; 255
    23b6:	8f 87       	std	Y+15, r24	; 0x0f
    23b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ba:	85 30       	cpi	r24, 0x05	; 5
    23bc:	70 f3       	brcs	.-36     	; 0x239a <ReceiveTwoPasswords+0x2a>
		password1[i] = UART_recieveByte();
	}

	/* Receive password2 via UART */
	for (i = 0; i < PASSWORD_SIZE; i++) {
    23be:	1f 86       	std	Y+15, r1	; 0x0f
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <ReceiveTwoPasswords+0x70>
		password2[i] = UART_recieveByte();
    23c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	8a 89       	ldd	r24, Y+18	; 0x12
    23ca:	9b 89       	ldd	r25, Y+19	; 0x13
    23cc:	8c 01       	movw	r16, r24
    23ce:	02 0f       	add	r16, r18
    23d0:	13 1f       	adc	r17, r19
    23d2:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    23d6:	f8 01       	movw	r30, r16
    23d8:	80 83       	st	Z, r24
	for (i = 0; i < PASSWORD_SIZE; i++) {
		password1[i] = UART_recieveByte();
	}

	/* Receive password2 via UART */
	for (i = 0; i < PASSWORD_SIZE; i++) {
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	8f 87       	std	Y+15, r24	; 0x0f
    23e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e2:	85 30       	cpi	r24, 0x05	; 5
    23e4:	70 f3       	brcs	.-36     	; 0x23c2 <ReceiveTwoPasswords+0x52>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	aa ef       	ldi	r26, 0xFA	; 250
    23ec:	b3 e4       	ldi	r27, 0x43	; 67
    23ee:	8b 87       	std	Y+11, r24	; 0x0b
    23f0:	9c 87       	std	Y+12, r25	; 0x0c
    23f2:	ad 87       	std	Y+13, r26	; 0x0d
    23f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	4a ef       	ldi	r20, 0xFA	; 250
    2404:	54 e4       	ldi	r21, 0x44	; 68
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8f 83       	std	Y+7, r24	; 0x07
    2410:	98 87       	std	Y+8, r25	; 0x08
    2412:	a9 87       	std	Y+9, r26	; 0x09
    2414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2416:	6f 81       	ldd	r22, Y+7	; 0x07
    2418:	78 85       	ldd	r23, Y+8	; 0x08
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <ReceiveTwoPasswords+0xc8>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <ReceiveTwoPasswords+0x146>
	else if (__tmp > 65535)
    2438:	6f 81       	ldd	r22, Y+7	; 0x07
    243a:	78 85       	ldd	r23, Y+8	; 0x08
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	3f ef       	ldi	r19, 0xFF	; 255
    2444:	4f e7       	ldi	r20, 0x7F	; 127
    2446:	57 e4       	ldi	r21, 0x47	; 71
    2448:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    244c:	18 16       	cp	r1, r24
    244e:	4c f5       	brge	.+82     	; 0x24a2 <ReceiveTwoPasswords+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2450:	6b 85       	ldd	r22, Y+11	; 0x0b
    2452:	7c 85       	ldd	r23, Y+12	; 0x0c
    2454:	8d 85       	ldd	r24, Y+13	; 0x0d
    2456:	9e 85       	ldd	r25, Y+14	; 0x0e
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	51 e4       	ldi	r21, 0x41	; 65
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	0f c0       	rjmp	.+30     	; 0x2498 <ReceiveTwoPasswords+0x128>
    247a:	88 ec       	ldi	r24, 0xC8	; 200
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <ReceiveTwoPasswords+0x116>
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f7       	brne	.-38     	; 0x247a <ReceiveTwoPasswords+0x10a>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <ReceiveTwoPasswords+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a2:	6f 81       	ldd	r22, Y+7	; 0x07
    24a4:	78 85       	ldd	r23, Y+8	; 0x08
    24a6:	89 85       	ldd	r24, Y+9	; 0x09
    24a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	8d 81       	ldd	r24, Y+5	; 0x05
    24b8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <ReceiveTwoPasswords+0x152>
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
		password2[i] = UART_recieveByte();
	}
	_delay_ms(KEY_PRESSED_DELAY ); /* Add a short delay after receiving passwords */
}
    24ca:	63 96       	adiw	r28, 0x13	; 19
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <ComparePasswords>:
/*
 * ComparePasswords function checks if two passwords match.
 * Returns 1 if they match, 0 if they don't match.
 */
uint8 ComparePasswords(uint8 *password1, uint8 *password2,
		uint8 *matchedPassword) {
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	28 97       	sbiw	r28, 0x08	; 8
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	9b 83       	std	Y+3, r25	; 0x03
    24f6:	8a 83       	std	Y+2, r24	; 0x02
    24f8:	7d 83       	std	Y+5, r23	; 0x05
    24fa:	6c 83       	std	Y+4, r22	; 0x04
    24fc:	5f 83       	std	Y+7, r21	; 0x07
    24fe:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2500:	19 82       	std	Y+1, r1	; 0x01
    2502:	2c c0       	rjmp	.+88     	; 0x255c <ComparePasswords+0x7c>
		if (password1[i] != password2[i]) {
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	9b 81       	ldd	r25, Y+3	; 0x03
    250e:	fc 01       	movw	r30, r24
    2510:	e2 0f       	add	r30, r18
    2512:	f3 1f       	adc	r31, r19
    2514:	40 81       	ld	r20, Z
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	9d 81       	ldd	r25, Y+5	; 0x05
    2520:	fc 01       	movw	r30, r24
    2522:	e2 0f       	add	r30, r18
    2524:	f3 1f       	adc	r31, r19
    2526:	80 81       	ld	r24, Z
    2528:	48 17       	cp	r20, r24
    252a:	19 f0       	breq	.+6      	; 0x2532 <ComparePasswords+0x52>
			return INCORRECT_PASSWORD; /* Passwords do not match */
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	88 87       	std	Y+8, r24	; 0x08
    2530:	1a c0       	rjmp	.+52     	; 0x2566 <ComparePasswords+0x86>
		}
		matchedPassword[i] = password1[i];
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	8e 81       	ldd	r24, Y+6	; 0x06
    253a:	9f 81       	ldd	r25, Y+7	; 0x07
    253c:	dc 01       	movw	r26, r24
    253e:	a2 0f       	add	r26, r18
    2540:	b3 1f       	adc	r27, r19
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	fc 01       	movw	r30, r24
    254e:	e2 0f       	add	r30, r18
    2550:	f3 1f       	adc	r31, r19
    2552:	80 81       	ld	r24, Z
    2554:	8c 93       	st	X, r24
 * Returns 1 if they match, 0 if they don't match.
 */
uint8 ComparePasswords(uint8 *password1, uint8 *password2,
		uint8 *matchedPassword) {
	uint8 i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	85 30       	cpi	r24, 0x05	; 5
    2560:	88 f2       	brcs	.-94     	; 0x2504 <ComparePasswords+0x24>
		if (password1[i] != password2[i]) {
			return INCORRECT_PASSWORD; /* Passwords do not match */
		}
		matchedPassword[i] = password1[i];
	}
	return CORRECT_PASSWORD; /* Passwords match */
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	88 87       	std	Y+8, r24	; 0x08
    2566:	88 85       	ldd	r24, Y+8	; 0x08
}
    2568:	28 96       	adiw	r28, 0x08	; 8
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <EEPROM_write_Password>:
 *******************************************************************************/
/*
 * EEPROM_write_Password function takes the user given password and writes it
 * in the EEPROM
 */
void EEPROM_write_Password(uint8 *password) {
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	61 97       	sbiw	r28, 0x11	; 17
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	99 8b       	std	Y+17, r25	; 0x11
    2590:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2592:	1f 86       	std	Y+15, r1	; 0x0f
    2594:	87 c0       	rjmp	.+270    	; 0x26a4 <EEPROM_write_Password+0x12a>
		EEPROM_writeByte(0x01 + i, password[i]);
    2596:	8f 85       	ldd	r24, Y+15	; 0x0f
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	ac 01       	movw	r20, r24
    25a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	88 89       	ldd	r24, Y+16	; 0x10
    25a8:	99 89       	ldd	r25, Y+17	; 0x11
    25aa:	fc 01       	movw	r30, r24
    25ac:	e2 0f       	add	r30, r18
    25ae:	f3 1f       	adc	r31, r19
    25b0:	20 81       	ld	r18, Z
    25b2:	ca 01       	movw	r24, r20
    25b4:	62 2f       	mov	r22, r18
    25b6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <EEPROM_writeByte>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a6 e9       	ldi	r26, 0x96	; 150
    25c0:	b3 e4       	ldi	r27, 0x43	; 67
    25c2:	8b 87       	std	Y+11, r24	; 0x0b
    25c4:	9c 87       	std	Y+12, r25	; 0x0c
    25c6:	ad 87       	std	Y+13, r26	; 0x0d
    25c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    25cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a ef       	ldi	r20, 0xFA	; 250
    25d8:	54 e4       	ldi	r21, 0x44	; 68
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8f 83       	std	Y+7, r24	; 0x07
    25e4:	98 87       	std	Y+8, r25	; 0x08
    25e6:	a9 87       	std	Y+9, r26	; 0x09
    25e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <EEPROM_write_Password+0x92>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	3f c0       	rjmp	.+126    	; 0x268a <EEPROM_write_Password+0x110>
	else if (__tmp > 65535)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <EEPROM_write_Password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	6b 85       	ldd	r22, Y+11	; 0x0b
    2626:	7c 85       	ldd	r23, Y+12	; 0x0c
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	0f c0       	rjmp	.+30     	; 0x266c <EEPROM_write_Password+0xf2>
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9c 83       	std	Y+4, r25	; 0x04
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <EEPROM_write_Password+0xe0>
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <EEPROM_write_Password+0xd4>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <EEPROM_write_Password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <EEPROM_write_Password+0x11c>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
 * EEPROM_write_Password function takes the user given password and writes it
 * in the EEPROM
 */
void EEPROM_write_Password(uint8 *password) {
	uint8 i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8f 87       	std	Y+15, r24	; 0x0f
    26a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a6:	85 30       	cpi	r24, 0x05	; 5
    26a8:	08 f4       	brcc	.+2      	; 0x26ac <EEPROM_write_Password+0x132>
    26aa:	75 cf       	rjmp	.-278    	; 0x2596 <EEPROM_write_Password+0x1c>
		EEPROM_writeByte(0x01 + i, password[i]);
		_delay_ms(MEDIUM_DELAY);
	}
}
    26ac:	61 96       	adiw	r28, 0x11	; 17
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <EEPROM_read_Password>:

/*
 * EEPROM_read_Password function reads the password saved in EEPROM
 * and returns it in a given array
 */
void EEPROM_read_Password(uint8 *password) {
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	62 97       	sbiw	r28, 0x12	; 18
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	9a 8b       	std	Y+18, r25	; 0x12
    26d4:	89 8b       	std	Y+17, r24	; 0x11
	uint8 EEPROM_Read_Byte, i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    26d6:	1f 86       	std	Y+15, r1	; 0x0f
    26d8:	89 c0       	rjmp	.+274    	; 0x27ec <EEPROM_read_Password+0x12e>
		EEPROM_readByte(0x01 + i, &EEPROM_Read_Byte);
    26da:	8f 85       	ldd	r24, Y+15	; 0x0f
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	01 96       	adiw	r24, 0x01	; 1
    26e2:	9e 01       	movw	r18, r28
    26e4:	20 5f       	subi	r18, 0xF0	; 240
    26e6:	3f 4f       	sbci	r19, 0xFF	; 255
    26e8:	b9 01       	movw	r22, r18
    26ea:	0e 94 cb 0b 	call	0x1796	; 0x1796 <EEPROM_readByte>
		password[i] = EEPROM_Read_Byte;
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	89 89       	ldd	r24, Y+17	; 0x11
    26f6:	9a 89       	ldd	r25, Y+18	; 0x12
    26f8:	fc 01       	movw	r30, r24
    26fa:	e2 0f       	add	r30, r18
    26fc:	f3 1f       	adc	r31, r19
    26fe:	88 89       	ldd	r24, Y+16	; 0x10
    2700:	80 83       	st	Z, r24
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a6 e9       	ldi	r26, 0x96	; 150
    2708:	b3 e4       	ldi	r27, 0x43	; 67
    270a:	8b 87       	std	Y+11, r24	; 0x0b
    270c:	9c 87       	std	Y+12, r25	; 0x0c
    270e:	ad 87       	std	Y+13, r26	; 0x0d
    2710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	6b 85       	ldd	r22, Y+11	; 0x0b
    2714:	7c 85       	ldd	r23, Y+12	; 0x0c
    2716:	8d 85       	ldd	r24, Y+13	; 0x0d
    2718:	9e 85       	ldd	r25, Y+14	; 0x0e
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a ef       	ldi	r20, 0xFA	; 250
    2720:	54 e4       	ldi	r21, 0x44	; 68
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8f 83       	std	Y+7, r24	; 0x07
    272c:	98 87       	std	Y+8, r25	; 0x08
    272e:	a9 87       	std	Y+9, r26	; 0x09
    2730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2732:	6f 81       	ldd	r22, Y+7	; 0x07
    2734:	78 85       	ldd	r23, Y+8	; 0x08
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f e3       	ldi	r21, 0x3F	; 63
    2742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2746:	88 23       	and	r24, r24
    2748:	2c f4       	brge	.+10     	; 0x2754 <EEPROM_read_Password+0x96>
		__ticks = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
    2752:	3f c0       	rjmp	.+126    	; 0x27d2 <EEPROM_read_Password+0x114>
	else if (__tmp > 65535)
    2754:	6f 81       	ldd	r22, Y+7	; 0x07
    2756:	78 85       	ldd	r23, Y+8	; 0x08
    2758:	89 85       	ldd	r24, Y+9	; 0x09
    275a:	9a 85       	ldd	r25, Y+10	; 0x0a
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	4c f5       	brge	.+82     	; 0x27be <EEPROM_read_Password+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	6b 85       	ldd	r22, Y+11	; 0x0b
    276e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2770:	8d 85       	ldd	r24, Y+13	; 0x0d
    2772:	9e 85       	ldd	r25, Y+14	; 0x0e
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <EEPROM_read_Password+0xf6>
    2796:	88 ec       	ldi	r24, 0xC8	; 200
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9c 83       	std	Y+4, r25	; 0x04
    279c:	8b 83       	std	Y+3, r24	; 0x03
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <EEPROM_read_Password+0xe4>
    27a6:	9c 83       	std	Y+4, r25	; 0x04
    27a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	69 f7       	brne	.-38     	; 0x2796 <EEPROM_read_Password+0xd8>
    27bc:	14 c0       	rjmp	.+40     	; 0x27e6 <EEPROM_read_Password+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <EEPROM_read_Password+0x120>
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
 * EEPROM_read_Password function reads the password saved in EEPROM
 * and returns it in a given array
 */
void EEPROM_read_Password(uint8 *password) {
	uint8 EEPROM_Read_Byte, i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	8f 5f       	subi	r24, 0xFF	; 255
    27ea:	8f 87       	std	Y+15, r24	; 0x0f
    27ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ee:	85 30       	cpi	r24, 0x05	; 5
    27f0:	08 f4       	brcc	.+2      	; 0x27f4 <EEPROM_read_Password+0x136>
    27f2:	73 cf       	rjmp	.-282    	; 0x26da <EEPROM_read_Password+0x1c>
		EEPROM_readByte(0x01 + i, &EEPROM_Read_Byte);
		password[i] = EEPROM_Read_Byte;
		_delay_ms(MEDIUM_DELAY);
	}
}
    27f4:	62 96       	adiw	r28, 0x12	; 18
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <ReceiveDoorPassword>:
 *******************************************************************************/
/*
 * ReceiveDoorPassword function takes the user given password and compare it in EEPROM
 * to see if its matched or not
 */
void ReceiveDoorPassword(uint8 *password) {
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	61 97       	sbiw	r28, 0x11	; 17
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	99 8b       	std	Y+17, r25	; 0x11
    2820:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(OPEN_DOOR_PASSWORD);
    2822:	86 e0       	ldi	r24, 0x06	; 6
    2824:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
	// Receive password1 via UART
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2828:	1f 86       	std	Y+15, r1	; 0x0f
    282a:	0f c0       	rjmp	.+30     	; 0x284a <ReceiveDoorPassword+0x44>
		password[i] = UART_recieveByte();
    282c:	8f 85       	ldd	r24, Y+15	; 0x0f
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	88 89       	ldd	r24, Y+16	; 0x10
    2834:	99 89       	ldd	r25, Y+17	; 0x11
    2836:	8c 01       	movw	r16, r24
    2838:	02 0f       	add	r16, r18
    283a:	13 1f       	adc	r17, r19
    283c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2840:	f8 01       	movw	r30, r16
    2842:	80 83       	st	Z, r24
void ReceiveDoorPassword(uint8 *password) {
	uint8 i;
	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(OPEN_DOOR_PASSWORD);
	// Receive password1 via UART
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2844:	8f 85       	ldd	r24, Y+15	; 0x0f
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	8f 87       	std	Y+15, r24	; 0x0f
    284a:	8f 85       	ldd	r24, Y+15	; 0x0f
    284c:	85 30       	cpi	r24, 0x05	; 5
    284e:	70 f3       	brcs	.-36     	; 0x282c <ReceiveDoorPassword+0x26>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	aa ef       	ldi	r26, 0xFA	; 250
    2856:	b3 e4       	ldi	r27, 0x43	; 67
    2858:	8b 87       	std	Y+11, r24	; 0x0b
    285a:	9c 87       	std	Y+12, r25	; 0x0c
    285c:	ad 87       	std	Y+13, r26	; 0x0d
    285e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2860:	6b 85       	ldd	r22, Y+11	; 0x0b
    2862:	7c 85       	ldd	r23, Y+12	; 0x0c
    2864:	8d 85       	ldd	r24, Y+13	; 0x0d
    2866:	9e 85       	ldd	r25, Y+14	; 0x0e
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	4a ef       	ldi	r20, 0xFA	; 250
    286e:	54 e4       	ldi	r21, 0x44	; 68
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8f 83       	std	Y+7, r24	; 0x07
    287a:	98 87       	std	Y+8, r25	; 0x08
    287c:	a9 87       	std	Y+9, r26	; 0x09
    287e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	2c f4       	brge	.+10     	; 0x28a2 <ReceiveDoorPassword+0x9c>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	3f c0       	rjmp	.+126    	; 0x2920 <ReceiveDoorPassword+0x11a>
	else if (__tmp > 65535)
    28a2:	6f 81       	ldd	r22, Y+7	; 0x07
    28a4:	78 85       	ldd	r23, Y+8	; 0x08
    28a6:	89 85       	ldd	r24, Y+9	; 0x09
    28a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	3f ef       	ldi	r19, 0xFF	; 255
    28ae:	4f e7       	ldi	r20, 0x7F	; 127
    28b0:	57 e4       	ldi	r21, 0x47	; 71
    28b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b6:	18 16       	cp	r1, r24
    28b8:	4c f5       	brge	.+82     	; 0x290c <ReceiveDoorPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    28bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28be:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e2       	ldi	r20, 0x20	; 32
    28c8:	51 e4       	ldi	r21, 0x41	; 65
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e 83       	std	Y+6, r25	; 0x06
    28e0:	8d 83       	std	Y+5, r24	; 0x05
    28e2:	0f c0       	rjmp	.+30     	; 0x2902 <ReceiveDoorPassword+0xfc>
    28e4:	88 ec       	ldi	r24, 0xC8	; 200
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <ReceiveDoorPassword+0xea>
    28f4:	9c 83       	std	Y+4, r25	; 0x04
    28f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	69 f7       	brne	.-38     	; 0x28e4 <ReceiveDoorPassword+0xde>
    290a:	14 c0       	rjmp	.+40     	; 0x2934 <ReceiveDoorPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290c:	6f 81       	ldd	r22, Y+7	; 0x07
    290e:	78 85       	ldd	r23, Y+8	; 0x08
    2910:	89 85       	ldd	r24, Y+9	; 0x09
    2912:	9a 85       	ldd	r25, Y+10	; 0x0a
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <ReceiveDoorPassword+0x126>
    2930:	9a 83       	std	Y+2, r25	; 0x02
    2932:	89 83       	std	Y+1, r24	; 0x01
		password[i] = UART_recieveByte();
	}

	_delay_ms(KEY_PRESSED_DELAY); /* Add a short delay after receiving passwords */
}
    2934:	61 96       	adiw	r28, 0x11	; 17
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	08 95       	ret

0000294a <CompareSavedPassword>:
 *******************************************************************************/
/*
 * CompareSavedPasswords function checks if two passwords match.
 * Returns 1 if they match, 0 if they don't match.
 */
uint8 CompareSavedPassword(uint8 *password1, uint8 *matchedPassword) {
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	a2 97       	sbiw	r28, 0x22	; 34
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	9f 8f       	std	Y+31, r25	; 0x1f
    2960:	8e 8f       	std	Y+30, r24	; 0x1e
    2962:	79 a3       	std	Y+33, r23	; 0x21
    2964:	68 a3       	std	Y+32, r22	; 0x20
	uint8 i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2966:	1d 8e       	std	Y+29, r1	; 0x1d
    2968:	8d c0       	rjmp	.+282    	; 0x2a84 <CompareSavedPassword+0x13a>
		if (password1[i] != matchedPassword[i]) {
    296a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2972:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2974:	fc 01       	movw	r30, r24
    2976:	e2 0f       	add	r30, r18
    2978:	f3 1f       	adc	r31, r19
    297a:	40 81       	ld	r20, Z
    297c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	88 a1       	ldd	r24, Y+32	; 0x20
    2984:	99 a1       	ldd	r25, Y+33	; 0x21
    2986:	fc 01       	movw	r30, r24
    2988:	e2 0f       	add	r30, r18
    298a:	f3 1f       	adc	r31, r19
    298c:	80 81       	ld	r24, Z
    298e:	48 17       	cp	r20, r24
    2990:	09 f4       	brne	.+2      	; 0x2994 <CompareSavedPassword+0x4a>
    2992:	75 c0       	rjmp	.+234    	; 0x2a7e <CompareSavedPassword+0x134>
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	aa ef       	ldi	r26, 0xFA	; 250
    299a:	b3 e4       	ldi	r27, 0x43	; 67
    299c:	89 8f       	std	Y+25, r24	; 0x19
    299e:	9a 8f       	std	Y+26, r25	; 0x1a
    29a0:	ab 8f       	std	Y+27, r26	; 0x1b
    29a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	69 8d       	ldd	r22, Y+25	; 0x19
    29a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	8d 8b       	std	Y+21, r24	; 0x15
    29be:	9e 8b       	std	Y+22, r25	; 0x16
    29c0:	af 8b       	std	Y+23, r26	; 0x17
    29c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29c4:	6d 89       	ldd	r22, Y+21	; 0x15
    29c6:	7e 89       	ldd	r23, Y+22	; 0x16
    29c8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ca:	98 8d       	ldd	r25, Y+24	; 0x18
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <CompareSavedPassword+0x9c>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <CompareSavedPassword+0x11a>
	else if (__tmp > 65535)
    29e6:	6d 89       	ldd	r22, Y+21	; 0x15
    29e8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ea:	8f 89       	ldd	r24, Y+23	; 0x17
    29ec:	98 8d       	ldd	r25, Y+24	; 0x18
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <CompareSavedPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9c 8b       	std	Y+20, r25	; 0x14
    2a24:	8b 8b       	std	Y+19, r24	; 0x13
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <CompareSavedPassword+0xfc>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9a 8b       	std	Y+18, r25	; 0x12
    2a2e:	89 8b       	std	Y+17, r24	; 0x11
    2a30:	89 89       	ldd	r24, Y+17	; 0x11
    2a32:	9a 89       	ldd	r25, Y+18	; 0x12
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <CompareSavedPassword+0xea>
    2a38:	9a 8b       	std	Y+18, r25	; 0x12
    2a3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9c 8b       	std	Y+20, r25	; 0x14
    2a44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <CompareSavedPassword+0xde>
    2a4e:	14 c0       	rjmp	.+40     	; 0x2a78 <CompareSavedPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	98 8b       	std	Y+16, r25	; 0x10
    2a6a:	8f 87       	std	Y+15, r24	; 0x0f
    2a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6e:	98 89       	ldd	r25, Y+16	; 0x10
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <CompareSavedPassword+0x126>
    2a74:	98 8b       	std	Y+16, r25	; 0x10
    2a76:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(KEY_PRESSED_DELAY);
			return INCORRECT_PASSWORD; /* Passwords do not match */
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	8a a3       	std	Y+34, r24	; 0x22
    2a7c:	7b c0       	rjmp	.+246    	; 0x2b74 <CompareSavedPassword+0x22a>
 * CompareSavedPasswords function checks if two passwords match.
 * Returns 1 if they match, 0 if they don't match.
 */
uint8 CompareSavedPassword(uint8 *password1, uint8 *matchedPassword) {
	uint8 i;
	for (i = 0; i < PASSWORD_SIZE; i++) {
    2a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a80:	8f 5f       	subi	r24, 0xFF	; 255
    2a82:	8d 8f       	std	Y+29, r24	; 0x1d
    2a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a86:	85 30       	cpi	r24, 0x05	; 5
    2a88:	08 f4       	brcc	.+2      	; 0x2a8c <CompareSavedPassword+0x142>
    2a8a:	6f cf       	rjmp	.-290    	; 0x296a <CompareSavedPassword+0x20>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	aa ef       	ldi	r26, 0xFA	; 250
    2a92:	b3 e4       	ldi	r27, 0x43	; 67
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	9c 87       	std	Y+12, r25	; 0x0c
    2a98:	ad 87       	std	Y+13, r26	; 0x0d
    2a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	98 87       	std	Y+8, r25	; 0x08
    2ab8:	a9 87       	std	Y+9, r26	; 0x09
    2aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <CompareSavedPassword+0x194>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <CompareSavedPassword+0x212>
	else if (__tmp > 65535)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <CompareSavedPassword+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <CompareSavedPassword+0x1f4>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <CompareSavedPassword+0x1e2>
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <CompareSavedPassword+0x1d6>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <CompareSavedPassword+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <CompareSavedPassword+0x21e>
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(KEY_PRESSED_DELAY);
			return INCORRECT_PASSWORD; /* Passwords do not match */
		}
	}
	_delay_ms(KEY_PRESSED_DELAY);
	return CORRECT_PASSWORD; /* Passwords match */
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	8a a3       	std	Y+34, r24	; 0x22
    2b74:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2b76:	a2 96       	adiw	r28, 0x22	; 34
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	08 95       	ret

00002b88 <mainOpertaionsOptions>:
 *     FUNCTION DEFINITION FOR COMPARING PASSWORDS [ received , matched ]      *
 *******************************************************************************/
/*
 * Motor operation which clock wise 15 seconds and 3 seconds idle and 15 seconds anti clock wise
 */
void mainOpertaionsOptions(void) {
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
        /*CLk_WISE*/
		DcMotor_Rotate(CW, 100);
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	64 e6       	ldi	r22, 0x64	; 100
    2b94:	0e 94 46 0c 	call	0x188c	; 0x188c <DcMotor_Rotate>
		timer1_delay(CLK_WISE_SECONDS);
    2b98:	8f e0       	ldi	r24, 0x0F	; 15
    2b9a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <timer1_delay>

		/*ANTI_CLk_WISE*/
		DcMotor_Rotate(STOP, 0);
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	0e 94 46 0c 	call	0x188c	; 0x188c <DcMotor_Rotate>
		timer1_delay(IDLE_SECONDS);
    2ba6:	83 e0       	ldi	r24, 0x03	; 3
    2ba8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <timer1_delay>

		/*ANTI_CLk_WISE*/
		DcMotor_Rotate(A_CW,100);
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	64 e6       	ldi	r22, 0x64	; 100
    2bb0:	0e 94 46 0c 	call	0x188c	; 0x188c <DcMotor_Rotate>
		timer1_delay(ANTI_CLK_WISE_SECONDS);
    2bb4:	8f e0       	ldi	r24, 0x0F	; 15
    2bb6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <timer1_delay>

		/*STOP*/
		DcMotor_Rotate(STOP, 0);
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	0e 94 46 0c 	call	0x188c	; 0x188c <DcMotor_Rotate>
}
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <IncorrectOptions>:
 *           FUNCTION DEFINITION FOR IMPELMENTING BUZZER OPTION                *
 *******************************************************************************/
/*
 * Turn on buzzer for 60 sec in case invalid operations of entering password for 3 times consecutive
 */
void IncorrectOptions(void) {
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    	/*BUZZER_ON*/
		Buzzer_on();
    2bd0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <Buzzer_on>

		/*60 Secs*/
		timer1_delay(BUZZER_SECONDS);
    2bd4:	8c e3       	ldi	r24, 0x3C	; 60
    2bd6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <timer1_delay>

		/*BUZZER_OFF*/
		Buzzer_off();
    2bda:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Buzzer_off>
}
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <__udivmodhi4>:
    2be4:	aa 1b       	sub	r26, r26
    2be6:	bb 1b       	sub	r27, r27
    2be8:	51 e1       	ldi	r21, 0x11	; 17
    2bea:	07 c0       	rjmp	.+14     	; 0x2bfa <__udivmodhi4_ep>

00002bec <__udivmodhi4_loop>:
    2bec:	aa 1f       	adc	r26, r26
    2bee:	bb 1f       	adc	r27, r27
    2bf0:	a6 17       	cp	r26, r22
    2bf2:	b7 07       	cpc	r27, r23
    2bf4:	10 f0       	brcs	.+4      	; 0x2bfa <__udivmodhi4_ep>
    2bf6:	a6 1b       	sub	r26, r22
    2bf8:	b7 0b       	sbc	r27, r23

00002bfa <__udivmodhi4_ep>:
    2bfa:	88 1f       	adc	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	5a 95       	dec	r21
    2c00:	a9 f7       	brne	.-22     	; 0x2bec <__udivmodhi4_loop>
    2c02:	80 95       	com	r24
    2c04:	90 95       	com	r25
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	08 95       	ret

00002c0c <__udivmodsi4>:
    2c0c:	a1 e2       	ldi	r26, 0x21	; 33
    2c0e:	1a 2e       	mov	r1, r26
    2c10:	aa 1b       	sub	r26, r26
    2c12:	bb 1b       	sub	r27, r27
    2c14:	fd 01       	movw	r30, r26
    2c16:	0d c0       	rjmp	.+26     	; 0x2c32 <__udivmodsi4_ep>

00002c18 <__udivmodsi4_loop>:
    2c18:	aa 1f       	adc	r26, r26
    2c1a:	bb 1f       	adc	r27, r27
    2c1c:	ee 1f       	adc	r30, r30
    2c1e:	ff 1f       	adc	r31, r31
    2c20:	a2 17       	cp	r26, r18
    2c22:	b3 07       	cpc	r27, r19
    2c24:	e4 07       	cpc	r30, r20
    2c26:	f5 07       	cpc	r31, r21
    2c28:	20 f0       	brcs	.+8      	; 0x2c32 <__udivmodsi4_ep>
    2c2a:	a2 1b       	sub	r26, r18
    2c2c:	b3 0b       	sbc	r27, r19
    2c2e:	e4 0b       	sbc	r30, r20
    2c30:	f5 0b       	sbc	r31, r21

00002c32 <__udivmodsi4_ep>:
    2c32:	66 1f       	adc	r22, r22
    2c34:	77 1f       	adc	r23, r23
    2c36:	88 1f       	adc	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	1a 94       	dec	r1
    2c3c:	69 f7       	brne	.-38     	; 0x2c18 <__udivmodsi4_loop>
    2c3e:	60 95       	com	r22
    2c40:	70 95       	com	r23
    2c42:	80 95       	com	r24
    2c44:	90 95       	com	r25
    2c46:	9b 01       	movw	r18, r22
    2c48:	ac 01       	movw	r20, r24
    2c4a:	bd 01       	movw	r22, r26
    2c4c:	cf 01       	movw	r24, r30
    2c4e:	08 95       	ret

00002c50 <__prologue_saves__>:
    2c50:	2f 92       	push	r2
    2c52:	3f 92       	push	r3
    2c54:	4f 92       	push	r4
    2c56:	5f 92       	push	r5
    2c58:	6f 92       	push	r6
    2c5a:	7f 92       	push	r7
    2c5c:	8f 92       	push	r8
    2c5e:	9f 92       	push	r9
    2c60:	af 92       	push	r10
    2c62:	bf 92       	push	r11
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	cf 93       	push	r28
    2c72:	df 93       	push	r29
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	ca 1b       	sub	r28, r26
    2c7a:	db 0b       	sbc	r29, r27
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	09 94       	ijmp

00002c88 <__epilogue_restores__>:
    2c88:	2a 88       	ldd	r2, Y+18	; 0x12
    2c8a:	39 88       	ldd	r3, Y+17	; 0x11
    2c8c:	48 88       	ldd	r4, Y+16	; 0x10
    2c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c9e:	df 80       	ldd	r13, Y+7	; 0x07
    2ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    2caa:	b9 81       	ldd	r27, Y+1	; 0x01
    2cac:	ce 0f       	add	r28, r30
    2cae:	d1 1d       	adc	r29, r1
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	ed 01       	movw	r28, r26
    2cbc:	08 95       	ret

00002cbe <_exit>:
    2cbe:	f8 94       	cli

00002cc0 <__stop_program>:
    2cc0:	ff cf       	rjmp	.-2      	; 0x2cc0 <__stop_program>
